# Generated by Django 3.2.18 on 2024-03-01 01:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Asteroid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="(ucd=“meta.id;meta.main”) Object name (official or provisional designation).",
                        max_length=35,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "number",
                    models.PositiveBigIntegerField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).",
                        null=True,
                        verbose_name="Number",
                    ),
                ),
                (
                    "principal_designation",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Principal designation assigned by the International Astronomical Union (IAU)",
                        max_length=35,
                        null=True,
                        verbose_name="Principal Designation",
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=35,
                        null=True,
                        verbose_name="Alias used internally as an internal name, formed by the name without special characters and with the addition of sequential numbers if necessary.",
                    ),
                ),
                (
                    "base_dynclass",
                    models.CharField(
                        db_index=True,
                        help_text="(ucd=“meta.code.class”) Object's base dynamical classification as defined by Skybot (KBO, Centaur, Trojan, MB, etc.).",
                        max_length=35,
                        verbose_name="Object's base dynamical classification as defined by Skybot",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        db_index=True,
                        help_text="(ucd=“meta.code.class;src.class”) Object's dynamical subclass as defined by Skybot (KBO>Resonant>12:5, MB>Inner, etc.).",
                        max_length=35,
                        verbose_name="Object's dynamical subclass as defined by Skybot",
                    ),
                ),
                (
                    "astorb_dynbaseclass",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Object's base dynamical classification as defined by AstOrb (Lowell Observatory)",
                        max_length=35,
                        null=True,
                        verbose_name="Object's base dynamical classification as defined by AstOrb",
                    ),
                ),
                (
                    "astorb_dynsubclass",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Object's dynamical subclass as defined by AstOrb (Lowell Observatory)",
                        max_length=35,
                        null=True,
                        verbose_name="Object's dynamical subclass as defined by AstOrb",
                    ),
                ),
                (
                    "h",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Absolute magnitude",
                        null=True,
                        verbose_name="H",
                    ),
                ),
                (
                    "g",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Phase slope parameter",
                        null=True,
                        verbose_name="G",
                    ),
                ),
                (
                    "epoch",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Epoch of the orbit (Julian Date)",
                        null=True,
                        verbose_name="Epoch of the orbit",
                    ),
                ),
                (
                    "semimajor_axis",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Semimajor axis (AU)",
                        null=True,
                        verbose_name="Semimajor axis",
                    ),
                ),
                (
                    "eccentricity",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Eccentricity",
                        null=True,
                        verbose_name="Eccentricity",
                    ),
                ),
                (
                    "inclination",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Inclination (degres)",
                        null=True,
                        verbose_name="Inclination",
                    ),
                ),
                (
                    "long_asc_node",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Longitude of the ascending node, J2000.0 (degrees)",
                        null=True,
                        verbose_name="Longitude of the ascending node",
                    ),
                ),
                (
                    "arg_perihelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Argument of perihelion, J2000.0 (degrees)",
                        null=True,
                        verbose_name="Argument of perihelion",
                    ),
                ),
                (
                    "mean_anomaly",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mean anomaly at the epoch (degrees)",
                        null=True,
                        verbose_name="Mean anomaly",
                    ),
                ),
                (
                    "mean_daily_motion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mean daily motion (degrees/day)",
                        null=True,
                        verbose_name="Mean daily motion",
                    ),
                ),
                (
                    "perihelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Perihelion distance (AU)",
                        null=True,
                        verbose_name="Perihelion distance",
                    ),
                ),
                (
                    "aphelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Aphelion distance (AU)",
                        null=True,
                        verbose_name="Aphelion distance",
                    ),
                ),
                (
                    "rms",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="r.m.s. residual of the fit (arcsec)",
                        null=True,
                        verbose_name="r.m.s. residual",
                    ),
                ),
                (
                    "last_obs_included",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="Date of last observation included in MPC orbit solution (YYYY-MM-DD format)",
                        null=True,
                        verbose_name="Date of last observation included",
                    ),
                ),
                (
                    "pha_flag",
                    models.BooleanField(
                        default=False,
                        help_text="Potentially Hazardous Asteroid Flag",
                        verbose_name="pha_flag",
                    ),
                ),
                (
                    "mpc_critical_list",
                    models.BooleanField(
                        default=False,
                        help_text="Critical objects numbered on the MPC list are those whose orbits require improvement",
                        verbose_name="mpc_critical_list",
                    ),
                ),
                (
                    "albedo",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Asteroid's surface reflectivity or brightness.",
                        null=True,
                        verbose_name="albedo",
                    ),
                ),
                (
                    "albedo_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Albedo lower error",
                        null=True,
                        verbose_name="albedo_err_min",
                    ),
                ),
                (
                    "albedo_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Albedo upper error",
                        null=True,
                        verbose_name="albedo_err_max",
                    ),
                ),
                (
                    "density",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density (kg/m^3)",
                        null=True,
                        verbose_name="density",
                    ),
                ),
                (
                    "density_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density lower error (kg/m^3)",
                        null=True,
                        verbose_name="density_err_min",
                    ),
                ),
                (
                    "density_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density upper error (kg/m^3)",
                        null=True,
                        verbose_name="density_err_max",
                    ),
                ),
                (
                    "diameter",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter (km)",
                        null=True,
                        verbose_name="diameter",
                    ),
                ),
                (
                    "diameter_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter lower error (km)",
                        null=True,
                        verbose_name="diameter_err_min",
                    ),
                ),
                (
                    "diameter_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter upper error (km)",
                        null=True,
                        verbose_name="diameter_err_max",
                    ),
                ),
                (
                    "mass",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass (kg)",
                        null=True,
                        verbose_name="mass",
                    ),
                ),
                (
                    "mass_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass lower error (kg)",
                        null=True,
                        verbose_name="mass_err_min",
                    ),
                ),
                (
                    "mass_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass upper error (kg)",
                        null=True,
                        verbose_name="mass_err_max",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AsteroidJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Aborting"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(blank=True, null=True, verbose_name="Start"),
                ),
                (
                    "end",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "exec_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "asteroids_before",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids antes da execução",
                        verbose_name="Asteroids Before",
                    ),
                ),
                (
                    "asteroids_after",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="Total asteroids após a execução",
                        null=True,
                        verbose_name="Asteroids After",
                    ),
                ),
                (
                    "new_records",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="Quantidade de registros adicionados ou removidos em relação a execução anterior.",
                        null=True,
                        verbose_name="New Records",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "traceback",
                    models.TextField(blank=True, null=True, verbose_name="Traceback"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BspPlanetary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Internal name",
                        max_length=100,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Display Name.",
                        max_length=100,
                        null=True,
                        verbose_name="Display name",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="URL of archives.",
                        max_length=100,
                        null=True,
                        verbose_name="URL",
                    ),
                ),
            ],
            options={
                "verbose_name": "Planetary Ephemeris",
                "verbose_name_plural": "Planetary Ephemeris",
            },
        ),
        migrations.CreateModel(
            name="Catalog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=128, verbose_name="Internal Name"),
                ),
                (
                    "display_name",
                    models.CharField(max_length=128, verbose_name="Display Name"),
                ),
                (
                    "database",
                    models.CharField(
                        default="catalog",
                        help_text="Database identifier",
                        max_length=128,
                        verbose_name="Database",
                    ),
                ),
                (
                    "schema",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="Schema name",
                    ),
                ),
                (
                    "tablename",
                    models.CharField(
                        help_text="Tablename without schema",
                        max_length=128,
                        verbose_name="Tablename",
                    ),
                ),
                (
                    "ra_property",
                    models.CharField(
                        default="ra",
                        help_text="name of the column that represents the RA in degrees",
                        max_length=128,
                        verbose_name="RA Property",
                    ),
                ),
                (
                    "dec_property",
                    models.CharField(
                        default="dec",
                        help_text="name of the column that represents the Dec in degrees",
                        max_length=128,
                        verbose_name="Dec Property",
                    ),
                ),
                (
                    "registration_date",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Registration Date"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JohnstonArchive",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).",
                        max_length=6,
                        null=True,
                        verbose_name="Number",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.id;meta.main”) Object name (official or provisional designation).",
                        max_length=32,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "provisional_designation",
                    models.CharField(
                        max_length=32, verbose_name="Provisional Designation"
                    ),
                ),
                (
                    "dynamical_class",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=32,
                        null=True,
                        verbose_name="Dynamical Class",
                    ),
                ),
                (
                    "a",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="a (AU)"
                    ),
                ),
                (
                    "e",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="e"
                    ),
                ),
                (
                    "perihelion_distance",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="q (AU) perihelion distance",
                        null=True,
                        verbose_name="perihelion distance",
                    ),
                ),
                (
                    "aphelion_distance",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Q (AU) aphelion distance",
                        null=True,
                        verbose_name="aphelion distance",
                    ),
                ),
                (
                    "i",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="i (deg)"
                    ),
                ),
                (
                    "diameter",
                    models.FloatField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Diameter (Km)",
                    ),
                ),
                (
                    "diameter_flag",
                    models.BooleanField(
                        default=False,
                        help_text="Diameter values marked by True are estimated assuming an albedo of 0.09 (or for secondary components, assuming the same albedo as the primary). Remaining diameter values have been determined by various methods (combined optical/thermal observations, dynamical fits/assumed densities for binaries, direct imagery, or stellar occultation).",
                        verbose_name="Diameter Flag",
                    ),
                ),
                (
                    "albedo",
                    models.FloatField(
                        blank=True, default=None, null=True, verbose_name="Albedo"
                    ),
                ),
                (
                    "b_r_mag",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="B-R magnitude is the difference between blue filter magnitude and red filter magnitude; values greater than 1.03 indicate spectra redder than that of the Sun.",
                        null=True,
                        verbose_name="B-R mag",
                    ),
                ),
                (
                    "taxon",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Taxonomic type is from Belskaya et al., 2015, Icarus, 250:482-491.",
                        max_length=10,
                        null=True,
                        verbose_name="Taxon Type",
                    ),
                ),
                (
                    "density",
                    models.FloatField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="Density (g/cm^3)",
                    ),
                ),
                (
                    "known_components",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=64,
                        null=True,
                        verbose_name="known add'l components",
                    ),
                ),
                (
                    "discovery",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="Discovery Year-Month",
                        null=True,
                        verbose_name="Discovery",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Updated"
                    ),
                ),
            ],
            options={
                "verbose_name": "Johnston Archive",
                "verbose_name_plural": "Johnston Archive",
            },
        ),
        migrations.CreateModel(
            name="LeapSecond",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Internal name",
                        max_length=100,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Display Name.",
                        max_length=100,
                        null=True,
                        verbose_name="Display name",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="URL of archives.",
                        max_length=100,
                        null=True,
                        verbose_name="URL",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leap Second",
                "verbose_name_plural": "Leap Second",
            },
        ),
        migrations.CreateModel(
            name="Occultation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="(ucd=“meta.id;meta.main”) Object name (official or provisional designation).",
                        max_length=35,
                        verbose_name="Name",
                    ),
                ),
                (
                    "number",
                    models.PositiveBigIntegerField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).",
                        null=True,
                        verbose_name="Number",
                    ),
                ),
                (
                    "principal_designation",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Principal designation assigned by the International Astronomical Union (IAU)",
                        max_length=35,
                        null=True,
                        verbose_name="Principal Designation",
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Alias used internally as an internal name, formed by the name without special characters and with the addition of sequential numbers if necessary.",
                        max_length=35,
                        null=True,
                        verbose_name="Alias",
                    ),
                ),
                (
                    "base_dynclass",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.code.class”) Object's base dynamical classification as defined by Skybot (KBO, Centaur, Trojan, MB, etc.).",
                        max_length=24,
                        null=True,
                        verbose_name="Object's base dynamical classification as defined by Skybot",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.code.class;src.class”) Object's dynamical subclass as defined by Skybot (KBO>Resonant>12:5, MB>Inner, etc.).",
                        max_length=24,
                        null=True,
                        verbose_name="Object's dynamical subclass as defined by Skybot",
                    ),
                ),
                (
                    "astorb_dynbaseclass",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Object's base dynamical classification as defined by AstOrb (Lowell Observatory)",
                        max_length=35,
                        null=True,
                        verbose_name="Object's base dynamical classification as defined by AstOrb",
                    ),
                ),
                (
                    "astorb_dynsubclass",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Object's dynamical subclass as defined by AstOrb (Lowell Observatory)",
                        max_length=35,
                        null=True,
                        verbose_name="Object's dynamical subclass as defined by AstOrb",
                    ),
                ),
                ("date_time", models.DateTimeField(verbose_name="Date Time")),
                (
                    "ra_star_candidate",
                    models.CharField(
                        help_text="Star candidate right ascension (hh:mm:ss)",
                        max_length=20,
                        verbose_name="RA Star Candidate",
                    ),
                ),
                (
                    "dec_star_candidate",
                    models.CharField(
                        help_text="Star candidate declination (dd:mm:ss)",
                        max_length=20,
                        verbose_name="Dec Star Candidate",
                    ),
                ),
                (
                    "ra_target",
                    models.CharField(
                        help_text="Target's right ascension (hh:mm:ss)",
                        max_length=20,
                        verbose_name="RA Target",
                    ),
                ),
                (
                    "dec_target",
                    models.CharField(
                        help_text="Target's declination (dd:mm:ss)",
                        max_length=20,
                        verbose_name="Dec Target",
                    ),
                ),
                (
                    "closest_approach",
                    models.FloatField(
                        default=0,
                        help_text="Geocentric closest approach (arcsec)",
                        verbose_name="Closest approach",
                    ),
                ),
                (
                    "position_angle",
                    models.FloatField(
                        default=0,
                        help_text="Planet position angle with respect to star at C/A (degrees)",
                        verbose_name="Position Angle",
                    ),
                ),
                (
                    "velocity",
                    models.FloatField(
                        default=0,
                        help_text="Velocity in plane of sky (km/s), positive= prograde, negative= retrograde",
                        verbose_name="Velocity",
                    ),
                ),
                (
                    "delta",
                    models.FloatField(
                        default=0,
                        help_text="Planet range to Earth, AU",
                        verbose_name="Delta",
                    ),
                ),
                (
                    "g_star",
                    models.FloatField(
                        default=0,
                        help_text="Gaia g magnitude",
                        verbose_name="Gaia g magnitude",
                    ),
                ),
                (
                    "j_star",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="2MASS J magnitude",
                        null=True,
                        verbose_name="2MASS J magnitude",
                    ),
                ),
                (
                    "h_star",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="2MASS H magnitude",
                        null=True,
                        verbose_name="2MASS H magnitude",
                    ),
                ),
                (
                    "k_star",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="2MASS K magnitude",
                        null=True,
                        verbose_name="2MASS K magnitude",
                    ),
                ),
                (
                    "long",
                    models.FloatField(
                        default=0,
                        help_text="East longitude of sub-planet point, deg, positive towards East",
                        verbose_name="Long",
                    ),
                ),
                (
                    "loc_t",
                    models.TimeField(
                        blank=True,
                        default=None,
                        help_text="loc. t.= UT + long: local solar time at sub-planet point, hh:mm",
                        null=True,
                        verbose_name="Loc. t.",
                    ),
                ),
                (
                    "off_ra",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Offset applied to ephemeris off_ra(mas) = A * (t-t0) + B",
                        null=True,
                        verbose_name="off_ra",
                    ),
                ),
                (
                    "off_dec",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Offset applied to ephemeris off_de(mas) = C * (t-t0) + D",
                        null=True,
                        verbose_name="off_dec",
                    ),
                ),
                (
                    "proper_motion",
                    models.CharField(
                        blank=True,
                        choices=[("ok", "ok"), ("no", "no")],
                        default=None,
                        help_text="Is proper motion applied? (ok, no)",
                        max_length=2,
                        null=True,
                        verbose_name="Proper Motion",
                    ),
                ),
                (
                    "ct",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Only Gaia DR1 stars are used",
                        max_length=10,
                        null=True,
                        verbose_name="ct",
                    ),
                ),
                (
                    "multiplicity_flag",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0", "no multiple entries per star in astrometry"),
                            ("1", "single position from 2 or more uc/2m entries"),
                            ("2", "single position from 1 uc/2m entry only"),
                            ("3", "fs position from entry with more N contributions"),
                            ("4", "fs position from entry with best (x,y) error"),
                            ("5", "fs position from entry with brightest R mag."),
                            ("6", "fs position from average over all entries."),
                        ],
                        default=None,
                        help_text="multiplicity flag (not applicable here) (see details in Assafin et al. 2010)",
                        max_length=2,
                        null=True,
                        verbose_name="Multiplicity Flag",
                    ),
                ),
                (
                    "e_ra",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="E_ra, E_dec: error of star position (mas)",
                        null=True,
                        verbose_name="E_ra",
                    ),
                ),
                (
                    "e_dec",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="E_ra, E_dec: error of star position (mas)",
                        null=True,
                        verbose_name="E_dec",
                    ),
                ),
                (
                    "pmra",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Star proper motion in right ascension (mas/yr); (0 when not provided by Gaia DR1)",
                        null=True,
                        verbose_name="pmra",
                    ),
                ),
                (
                    "pmdec",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Star's proper motion in declination (mas/yr); (0 when not provided by Gaia DR1)",
                        null=True,
                        verbose_name="pmdec",
                    ),
                ),
                (
                    "ra_star_deg",
                    models.FloatField(
                        blank=True,
                        help_text="Star's right ascension (degrees)",
                        null=True,
                        verbose_name="RA Star deg",
                    ),
                ),
                (
                    "dec_star_deg",
                    models.FloatField(
                        blank=True,
                        help_text="Star's declination (degrees)",
                        null=True,
                        verbose_name="Dec Star deg",
                    ),
                ),
                (
                    "ra_target_deg",
                    models.FloatField(
                        blank=True,
                        help_text="Target's right ascension (degrees)",
                        null=True,
                        verbose_name="RA Target deg",
                    ),
                ),
                (
                    "dec_target_deg",
                    models.FloatField(
                        blank=True,
                        help_text="Target's declination (degrees)",
                        null=True,
                        verbose_name="Dec Target deg",
                    ),
                ),
                (
                    "magnitude_drop",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Expected star's magnitude drop",
                        null=True,
                        verbose_name="magnitude_drop",
                    ),
                ),
                (
                    "apparent_magnitude",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Asteroids' apparent magnitude at the date (mag)",
                        null=True,
                        verbose_name="Apparent magnitude",
                    ),
                ),
                (
                    "aparent_diameter",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Apparent diameter of the Earth as seen from the Asteroid (degrees)",
                        null=True,
                        verbose_name="aparent_diameter",
                    ),
                ),
                (
                    "g_mag_vel_corrected",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Gaia magnitude corrected from velocity",
                        null=True,
                        verbose_name="g_mag_vel_corrected",
                    ),
                ),
                (
                    "rp_mag_vel_corrected",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Gaia RP magnitude corrected from velocity",
                        null=True,
                        verbose_name="rp_mag_vel_corrected",
                    ),
                ),
                (
                    "h_mag_vel_corrected",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="2MASS H magnitude corrected from velocity",
                        null=True,
                        verbose_name="h_mag_vel_corrected",
                    ),
                ),
                (
                    "instant_uncertainty",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Instant of the closest approach uncertainty (seconds)",
                        null=True,
                        verbose_name="instant_uncertainty",
                    ),
                ),
                (
                    "ra_star_with_pm",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Star's right ascension corrected for proper motion",
                        max_length=35,
                        null=True,
                        verbose_name="ra_star_with_pm",
                    ),
                ),
                (
                    "dec_star_with_pm",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Star's declination corrected for proper motion",
                        max_length=35,
                        null=True,
                        verbose_name="dec_star_with_pm",
                    ),
                ),
                (
                    "ra_star_to_date",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Star's right ascension reduced to date",
                        max_length=35,
                        null=True,
                        verbose_name="ra_star_to_date",
                    ),
                ),
                (
                    "dec_star_to_date",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Star's declination reduced to date",
                        max_length=35,
                        null=True,
                        verbose_name="dec_star_to_date",
                    ),
                ),
                (
                    "ra_target_apparent",
                    models.CharField(
                        blank=True,
                        help_text="Target's apparent right ascension",
                        max_length=20,
                        null=True,
                        verbose_name="ra_target_apparent",
                    ),
                ),
                (
                    "dec_target_apparent",
                    models.CharField(
                        blank=True,
                        help_text="Target's apparent declination",
                        max_length=20,
                        null=True,
                        verbose_name="dec_target_apparent",
                    ),
                ),
                (
                    "e_ra_target",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Error in target's right ascension",
                        null=True,
                        verbose_name="E_ra_target",
                    ),
                ),
                (
                    "e_dec_target",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Error in target's declination",
                        null=True,
                        verbose_name="E_dec_target",
                    ),
                ),
                (
                    "ephemeris_version",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Ephemeris version",
                        max_length=35,
                        null=True,
                        verbose_name="Ephemeris version",
                    ),
                ),
                (
                    "have_path_coeff",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Has path coefficients, i.e., the occultation passes over the earth;",
                        null=True,
                        verbose_name="Has path coefficients",
                    ),
                ),
                (
                    "occ_path_min_longitude",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Minimum longitude the occultation path reaches. -90 +90",
                        null=True,
                        verbose_name="Minimum longitude",
                    ),
                ),
                (
                    "occ_path_max_longitude",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Maximum longitude the occultation path reaches. -90 +90",
                        null=True,
                        verbose_name="Maximum longitude",
                    ),
                ),
                (
                    "occ_path_min_latitude",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Minimum latitude the occultation path reaches. -180 +180",
                        null=True,
                        verbose_name="Minimum latitude",
                    ),
                ),
                (
                    "occ_path_max_latitude",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Maximum latitude the occultation path reaches. -180 +180",
                        null=True,
                        verbose_name="Maximum latitude",
                    ),
                ),
                (
                    "occ_path_is_nightside",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text="True if any part of the path crosses the nightside of the Earth",
                        null=True,
                        verbose_name="Occultation path nightside",
                    ),
                ),
                (
                    "occ_path_coeff",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Occultation path coefficients of the polynomial fit",
                        null=True,
                        verbose_name="Occultation path coefficients",
                    ),
                ),
                (
                    "h",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Absolute magnitude",
                        null=True,
                        verbose_name="H",
                    ),
                ),
                (
                    "g",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Phase slope parameter",
                        null=True,
                        verbose_name="G",
                    ),
                ),
                (
                    "epoch",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Epoch of the orbit (Julian Date)",
                        null=True,
                        verbose_name="Epoch of the orbit",
                    ),
                ),
                (
                    "semimajor_axis",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Semimajor axis (AU)",
                        null=True,
                        verbose_name="Semimajor axis",
                    ),
                ),
                (
                    "eccentricity",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Eccentricity",
                        null=True,
                        verbose_name="Eccentricity",
                    ),
                ),
                (
                    "inclination",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Inclination (degres)",
                        null=True,
                        verbose_name="Inclination",
                    ),
                ),
                (
                    "long_asc_node",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Longitude of the ascending node, J2000.0 (degrees)",
                        null=True,
                        verbose_name="Longitude of the ascending node",
                    ),
                ),
                (
                    "arg_perihelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Argument of perihelion, J2000.0 (degrees)",
                        null=True,
                        verbose_name="Argument of perihelion",
                    ),
                ),
                (
                    "mean_anomaly",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mean anomaly at the epoch (degrees)",
                        null=True,
                        verbose_name="Mean anomaly",
                    ),
                ),
                (
                    "mean_daily_motion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mean daily motion (degrees/day)",
                        null=True,
                        verbose_name="Mean daily motion",
                    ),
                ),
                (
                    "perihelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Perihelion (AU)",
                        null=True,
                        verbose_name="Perihelion",
                    ),
                ),
                (
                    "aphelion",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Aphelion (AU)",
                        null=True,
                        verbose_name="Aphelion",
                    ),
                ),
                (
                    "rms",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="r.m.s. residual of the fit (arcsec)",
                        null=True,
                        verbose_name="r.m.s. residual",
                    ),
                ),
                (
                    "last_obs_included",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="Date of last observation included in orbit solution (YYYY-MM-DD format)",
                        null=True,
                        verbose_name="Date of last observation included",
                    ),
                ),
                (
                    "pha_flag",
                    models.BooleanField(
                        blank=True, default=False, null=True, verbose_name="pha_flag"
                    ),
                ),
                (
                    "mpc_critical_list",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Critical objects numbered on the MPC list are those whose orbits require improvement",
                        null=True,
                        verbose_name="mpc_critical_list",
                    ),
                ),
                (
                    "albedo",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Albedo",
                        null=True,
                        verbose_name="albedo",
                    ),
                ),
                (
                    "albedo_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Albedo lower error",
                        null=True,
                        verbose_name="albedo_err_min",
                    ),
                ),
                (
                    "albedo_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Albedo upper error",
                        null=True,
                        verbose_name="albedo_err_max",
                    ),
                ),
                (
                    "density",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density (kg/m^3)",
                        null=True,
                        verbose_name="density",
                    ),
                ),
                (
                    "density_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density lower error (kg/m^3)",
                        null=True,
                        verbose_name="density_err_min",
                    ),
                ),
                (
                    "density_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Density upper error (kg/m^3)",
                        null=True,
                        verbose_name="density_err_max",
                    ),
                ),
                (
                    "diameter",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter (km)",
                        null=True,
                        verbose_name="diameter",
                    ),
                ),
                (
                    "diameter_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter lower error (km)",
                        null=True,
                        verbose_name="diameter_err_min",
                    ),
                ),
                (
                    "diameter_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Diameter upper error (km)",
                        null=True,
                        verbose_name="diameter_err_max",
                    ),
                ),
                (
                    "mass",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass (kg)",
                        null=True,
                        verbose_name="mass",
                    ),
                ),
                (
                    "mass_err_min",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass upper error (kg)",
                        null=True,
                        verbose_name="mass_err_min",
                    ),
                ),
                (
                    "mass_err_max",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Mass lower error (kg)",
                        null=True,
                        verbose_name="mass_err_max",
                    ),
                ),
                (
                    "catalog",
                    models.CharField(
                        blank=True,
                        default="GAIA DR2",
                        help_text="Catalog of stars used in prediction. for example GAIA DR2",
                        max_length=10,
                        null=True,
                        verbose_name="Stellar Catalog",
                    ),
                ),
                (
                    "predict_step",
                    models.IntegerField(
                        blank=True,
                        default=600,
                        help_text="Prediction step size (seconds)",
                        null=True,
                        verbose_name="Prediction Step",
                    ),
                ),
                (
                    "bsp_source",
                    models.CharField(
                        blank=True,
                        default="JPL",
                        help_text="Asteroid Bsp ephemeris data source. for example JPL.",
                        max_length=10,
                        null=True,
                        verbose_name="Bsp Source",
                    ),
                ),
                (
                    "obs_source",
                    models.CharField(
                        blank=True,
                        default="MPC",
                        help_text="Observation data source, AstDys or MPC.",
                        max_length=10,
                        null=True,
                        verbose_name="Observation Source",
                    ),
                ),
                (
                    "orb_ele_source",
                    models.CharField(
                        blank=True,
                        default="MPC",
                        help_text="Orbital Elements data source, AstDys or MPC.",
                        max_length=10,
                        null=True,
                        verbose_name="Orbital Elements Source",
                    ),
                ),
                (
                    "bsp_planetary",
                    models.CharField(
                        blank=True,
                        default="de440",
                        help_text="File/version of planetary ephemeris used.",
                        max_length=10,
                        null=True,
                        verbose_name="Planetary Ephemeris",
                    ),
                ),
                (
                    "leap_seconds",
                    models.CharField(
                        blank=True,
                        default="naif0012",
                        help_text="File/version of Leap Seconds used.",
                        max_length=10,
                        null=True,
                        verbose_name="Leap Seconds",
                    ),
                ),
                (
                    "nima",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="True if the prediction used NIMA results.",
                        null=True,
                        verbose_name="NIMA",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "job_id",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="Identification of the prediction job that generated this prediction.",
                        null=True,
                        verbose_name="Prediction Job",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PredictionJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Aborting"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "submit_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="Submit Time"),
                ),
                (
                    "start",
                    models.DateTimeField(blank=True, null=True, verbose_name="Start"),
                ),
                (
                    "end",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "exec_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "avg_exec_time",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="average execution time per asteroid. (seconds)",
                        null=True,
                        verbose_name="Average Execution Time",
                    ),
                ),
                (
                    "filter_type",
                    models.CharField(
                        choices=[
                            ("name", "Object name"),
                            ("dynclass", "Dynamic class (with subclasses)"),
                            ("base_dynclass", "Dynamic class"),
                        ],
                        max_length=15,
                        verbose_name="Filter Type",
                    ),
                ),
                ("filter_value", models.TextField(verbose_name="Filter Value")),
                (
                    "predict_start_date",
                    models.DateField(
                        help_text="Date Initial of Predictions",
                        verbose_name="Date Initial",
                    ),
                ),
                (
                    "predict_end_date",
                    models.DateField(
                        help_text="Date Final of Predictions",
                        verbose_name="Date Final of Predictions",
                    ),
                ),
                (
                    "predict_interval",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Prediction range formatted with humanize.",
                        max_length=100,
                        null=True,
                        verbose_name="Predict Interval",
                    ),
                ),
                (
                    "predict_step",
                    models.IntegerField(
                        default=600,
                        help_text="Prediction Step",
                        verbose_name="Prediction Step",
                    ),
                ),
                (
                    "count_asteroids",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids selected to run this job",
                        verbose_name="Asteroids",
                    ),
                ),
                (
                    "count_asteroids_with_occ",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids with at least one occultation event identified by predict occultation.",
                        verbose_name="Asteroids With Occultations",
                    ),
                ),
                (
                    "count_occ",
                    models.IntegerField(
                        default=0,
                        help_text="Total occultation events identified by predict occultation.",
                        verbose_name="Occultations",
                    ),
                ),
                (
                    "count_success",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids successfully executed in all steps.",
                        verbose_name="Success",
                    ),
                ),
                (
                    "count_failures",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids that failed at least one of the steps.",
                        verbose_name="Failures Count",
                    ),
                ),
                (
                    "debug",
                    models.BooleanField(
                        default=False,
                        help_text="Debug False all log files and intermediate results will be deleted at the end of the job.",
                        verbose_name="Debug",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "traceback",
                    models.TextField(blank=True, null=True, verbose_name="Traceback"),
                ),
                (
                    "catalog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.catalog",
                        verbose_name="Catalog",
                    ),
                ),
                (
                    "leap_second",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.leapsecond",
                        verbose_name="Leap Second",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predicition_run",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "planetary_ephemeris",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.bspplanetary",
                        verbose_name="Planetary Ephemeris",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dashboard", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "profile",
            },
        ),
        migrations.CreateModel(
            name="PredictionJobStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "step",
                    models.IntegerField(
                        choices=[(1, "Primeira Etapa"), (2, "Segunda Etapa")],
                        help_text="Identification of the step in the pipeline.",
                        verbose_name="Step",
                    ),
                ),
                (
                    "task",
                    models.CharField(
                        default="",
                        help_text="Name of the task being executed.",
                        max_length=100,
                        verbose_name="Task",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Aborting"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        default=0,
                        help_text="Total items to be processed in the step.",
                        verbose_name="Total Count",
                    ),
                ),
                (
                    "current",
                    models.IntegerField(
                        default=0,
                        help_text="Current position in execution.",
                        verbose_name="Current",
                    ),
                ),
                (
                    "average_time",
                    models.FloatField(
                        default=0,
                        help_text="Average time per item in seconds.",
                        verbose_name="Average Time",
                    ),
                ),
                (
                    "time_estimate",
                    models.FloatField(
                        default=0,
                        help_text="Estimated time to complete the step in seconds.",
                        verbose_name="Estimated Time",
                    ),
                ),
                (
                    "success",
                    models.IntegerField(
                        default=0,
                        help_text="Number of items successfully executed.",
                        verbose_name="Success",
                    ),
                ),
                (
                    "failures",
                    models.IntegerField(
                        default=0,
                        help_text="Number of items that failed.",
                        verbose_name="Failures",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Updated"
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.predictionjob",
                        verbose_name="Prediction Job",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PredictionJobResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Asteroid Name"),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Asteroid Number",
                    ),
                ),
                (
                    "base_dynclass",
                    models.CharField(
                        default="",
                        max_length=100,
                        verbose_name="Asteroid Base DynClass",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        default="", max_length=100, verbose_name="Asteroid DynClass"
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(1, "Success"), (2, "Failed")],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "des_obs",
                    models.IntegerField(
                        default=0,
                        help_text="total DES observations for this asteroid.",
                        verbose_name="des_obs",
                    ),
                ),
                (
                    "occultations",
                    models.IntegerField(
                        default=0,
                        help_text="Number of occultation events identified for this asteroid.",
                        verbose_name="Occultations",
                    ),
                ),
                (
                    "obs_source",
                    models.CharField(
                        blank=True,
                        help_text="Observation data source, AstDys or MPC.",
                        max_length=100,
                        null=True,
                        verbose_name="Observation Source",
                    ),
                ),
                (
                    "orb_ele_source",
                    models.CharField(
                        blank=True,
                        help_text="Orbital Elements data source, AstDys or MPC.",
                        max_length=100,
                        null=True,
                        verbose_name="Orbital Elements Source",
                    ),
                ),
                (
                    "exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="Prediction pipeline runtime for this asteroid.",
                        null=True,
                        verbose_name="exec_time",
                    ),
                ),
                (
                    "messages",
                    models.TextField(
                        blank=True,
                        help_text="Error messages that occurred while running this asteroid, there may be more than one in this case will be separated by ;",
                        null=True,
                        verbose_name="messages",
                    ),
                ),
                (
                    "des_obs_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start of the execution of the DES Observations step",
                        null=True,
                        verbose_name="DES Observations Start",
                    ),
                ),
                (
                    "des_obs_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the DES Observations stage",
                        null=True,
                        verbose_name="DES Observations Finish",
                    ),
                ),
                (
                    "des_obs_exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="DES Observations step execution time in seconds.",
                        null=True,
                        verbose_name="DES Observations Execution Time",
                    ),
                ),
                (
                    "bsp_jpl_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Beginning of the JPL BSP Download step.",
                        null=True,
                        verbose_name="BSP JPL start",
                    ),
                ),
                (
                    "bsp_jpl_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the Dwonload stage of the JPL BSP.",
                        null=True,
                        verbose_name="BSP JPL finish",
                    ),
                ),
                (
                    "bsp_jpl_dw_time",
                    models.DurationField(
                        blank=True,
                        help_text="BSP download time from JPL.",
                        null=True,
                        verbose_name="BSP JPL download time",
                    ),
                ),
                (
                    "obs_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Beginning of the Download stage of observations.",
                        null=True,
                        verbose_name="Observations Download Start",
                    ),
                ),
                (
                    "obs_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the Download stage of the observations.",
                        null=True,
                        verbose_name="Observations Download Finish",
                    ),
                ),
                (
                    "obs_dw_time",
                    models.DurationField(
                        blank=True,
                        help_text="Observations download time.",
                        null=True,
                        verbose_name="Observations Download Time",
                    ),
                ),
                (
                    "orb_ele_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Beginning of the Orbtial Elements Download stage.",
                        null=True,
                        verbose_name="Orbital Elements Start",
                    ),
                ),
                (
                    "orb_ele_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of Orbital Elements Download step.",
                        null=True,
                        verbose_name="Orbital Elements Finish",
                    ),
                ),
                (
                    "orb_ele_dw_time",
                    models.DurationField(
                        blank=True,
                        help_text="Orbital Elements download time.",
                        null=True,
                        verbose_name="Orbital Elements Download Time",
                    ),
                ),
                (
                    "ref_orb_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start of the Refine Orbit step.",
                        null=True,
                        verbose_name="Refine Orbit Start",
                    ),
                ),
                (
                    "ref_orb_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the Refine Orbit step.",
                        null=True,
                        verbose_name="Refine Orbit Finish",
                    ),
                ),
                (
                    "ref_orb_exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="Refine Orbit runtime.",
                        null=True,
                        verbose_name="Refine Orbit execution time",
                    ),
                ),
                (
                    "pre_occ_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start of the Predict Occultation step.",
                        null=True,
                        verbose_name="Predict Occultation Start",
                    ),
                ),
                (
                    "pre_occ_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the Predict Occultation step.",
                        null=True,
                        verbose_name="Predict Occultation Finish",
                    ),
                ),
                (
                    "pre_occ_exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="Predict Occultation runtime.",
                        null=True,
                        verbose_name="Predict Occultation Execution Time",
                    ),
                ),
                (
                    "calc_path_coeff_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start of path coeff.",
                        null=True,
                        verbose_name="Calc Path Coeff Start",
                    ),
                ),
                (
                    "calc_path_coeff_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of path coeff.",
                        null=True,
                        verbose_name="Calc Path Coeff Finish",
                    ),
                ),
                (
                    "calc_path_coeff_exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="Execution time of the path coeff step.",
                        null=True,
                        verbose_name="Calc Path Coeff Execution Time",
                    ),
                ),
                (
                    "ing_occ_count",
                    models.IntegerField(
                        default=0,
                        help_text="Total Occultations registered in the database.",
                        verbose_name="Occultations Ingested",
                    ),
                ),
                (
                    "ing_occ_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start recording the results.",
                        null=True,
                        verbose_name="Result Ingestion Start",
                    ),
                ),
                (
                    "ing_occ_finish",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of record of results.",
                        null=True,
                        verbose_name="Result Ingestion Finish",
                    ),
                ),
                (
                    "ing_occ_exec_time",
                    models.DurationField(
                        blank=True,
                        help_text="Execution time of the results ingestion step.",
                        null=True,
                        verbose_name="Result Ingestion Execution Time",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.predictionjob",
                        verbose_name="Prediction Job",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(fields=["name"], name="tno_occulta_name_a76898_idx"),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(fields=["number"], name="tno_occulta_number_0b28dc_idx"),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["principal_designation"], name="tno_occulta_princip_85f90a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["base_dynclass"], name="tno_occulta_base_dy_ccaa5f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["dynclass"], name="tno_occulta_dynclas_2aaa71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["astorb_dynbaseclass"], name="tno_occulta_astorb__da9cf2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["astorb_dynsubclass"], name="tno_occulta_astorb__fee3ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["date_time"], name="tno_occulta_date_ti_6f7f46_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(fields=["g_star"], name="tno_occulta_g_star_bb4e32_idx"),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["have_path_coeff"], name="tno_occulta_have_pa_d3e242_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["occ_path_min_longitude"], name="tno_occulta_occ_pat_8c7df7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["occ_path_max_longitude"], name="tno_occulta_occ_pat_cb7098_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["occ_path_min_latitude"], name="tno_occulta_occ_pat_76d749_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["occ_path_max_latitude"], name="tno_occulta_occ_pat_cb23f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["occ_path_is_nightside"], name="tno_occulta_occ_pat_09c378_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(fields=["g"], name="tno_occulta_g_63a652_idx"),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(
                fields=["created_at"], name="tno_occulta_created_ec9f58_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="occultation",
            index=models.Index(fields=["job_id"], name="tno_occulta_job_id_46ebd9_idx"),
        ),
    ]
