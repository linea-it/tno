# Generated by Django 3.2.18 on 2024-02-16 00:13

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("des", "0001_initial"),
        ("des", "0002_skybotjobresult"),
        ("des", "0003_skybotposition_ticket"),
        ("des", "0004_auto_20200611_1903"),
        ("des", "0005_auto_20200623_2039"),
        ("des", "0006_auto_20200624_2016"),
        ("des", "0007_downloadccdjob"),
        ("des", "0008_auto_20200626_1853"),
        ("des", "0009_downloadccdjobresult"),
        ("des", "0010_auto_20200702_2045"),
        ("des", "0011_auto_20200702_2125"),
        ("des", "0012_auto_20200706_2003"),
        ("des", "0013_downloadccdjob_path"),
        ("des", "0014_auto_20200720_1617"),
        ("des", "0015_auto_20200727_2104"),
        ("des", "0016_auto_20200730_2038"),
        ("des", "0017_auto_20200819_1558"),
        ("des", "0018_skybotjob_estimated_execution_time"),
        ("des", "0019_auto_20200828_1716"),
        ("des", "0020_skybotjob_exposures_analyzed"),
        ("des", "0021_remove_skybotjob_exposures_analyzed"),
        ("des", "0022_auto_20200917_1322"),
        ("des", "0023_skybotjobresult_error"),
        ("des", "0020_auto_20200930_1532"),
        ("des", "0024_merge_20201014_1701"),
        ("des", "0025_auto_20201022_1304"),
        ("des", "0026_dashboardskybotdynclassresult_dashboardskybotyearresult"),
        ("des", "0027_auto_20201104_1832"),
        ("des", "0028_observation"),
        ("des", "0029_auto_20210625_0122"),
        ("des", "0030_astrometryjob"),
        ("des", "0031_auto_20210713_2122"),
        ("des", "0032_auto_20210713_2127"),
        ("des", "0033_auto_20210722_1449"),
        ("des", "0034_auto_20210728_1944"),
        ("des", "0035_auto_20210810_2053"),
        ("des", "0036_auto_20221117_1353"),
        ("des", "0037_auto_20221118_1448"),
        ("des", "0038_delete_astrometryjob"),
        ("des", "0039_auto_20230131_1617"),
        ("des", "0040_orbittracejob"),
        ("des", "0041_auto_20230216_1918"),
        ("des", "0042_auto_20230216_2033"),
        ("des", "0043_auto_20230216_2036"),
        ("des", "0044_auto_20230216_2040"),
        ("des", "0045_auto_20230216_2041"),
        ("des", "0046_orbittracejob_observatory_location"),
        ("des", "0047_orbittracejob_time_profile"),
        ("des", "0048_auto_20230216_2057"),
        ("des", "0040_skybotjob_debug"),
        ("des", "0041_auto_20230215_2328"),
        ("des", "0049_merge_0041_auto_20230215_2328_0048_auto_20230216_2057"),
        ("des", "0042_skybotjob_submit_time"),
        ("des", "0050_merge_20230228_2107"),
        ("des", "0051_auto_20230301_1833"),
        ("des", "0052_orbittracejobresult"),
        ("des", "0053_alter_orbittracejobresult_job"),
        ("des", "0054_alter_orbittracejob_status"),
        ("des", "0055_auto_20230330_2300"),
        ("des", "0056_alter_orbittracejob_h_exec_time"),
        ("des", "0057_auto_20230331_0223"),
        ("des", "0058_auto_20230331_1942"),
        ("des", "0059_auto_20230401_0011"),
        ("des", "0060_auto_20230405_1702"),
        ("des", "0061_observation_ccd_id"),
        ("des", "0062_alter_observation_unique_together"),
        ("des", "0063_observation_created_at"),
        ("des", "0064_auto_20230531_2149"),
        ("des", "0065_auto_20230531_2222"),
        ("des", "0066_orbittracejobresult_exec_time"),
        ("des", "0067_orbittracejobstatus"),
        ("des", "0068_auto_20230605_1411"),
        ("des", "0069_alter_orbittracejobstatus_task"),
        ("des", "0070_auto_20240123_1257"),
    ]

    initial = True

    dependencies = [
        ("skybot", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tno", "0022_auto_20230401_0011"),
        ("tno", "0003_bspplanetary_leapsecond"),
        ("tno", "0012_alter_catalog_database"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ccd",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="Unique identifier for each CCD. desfile_id in DES database.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="CCD Id",
                    ),
                ),
                (
                    "ccdnum",
                    models.IntegerField(
                        help_text="CCD Number (1, 2, ..., 62)", verbose_name="CCD"
                    ),
                ),
                (
                    "ra_cent",
                    models.FloatField(
                        help_text="Right ascension of the CCD center", verbose_name="RA"
                    ),
                ),
                (
                    "dec_cent",
                    models.FloatField(
                        help_text="Declination of the CCD center", verbose_name="Dec"
                    ),
                ),
                (
                    "rac1",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 1 - upper left.",
                        verbose_name="rac1",
                    ),
                ),
                (
                    "rac2",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 2 - lower left.",
                        verbose_name="rac2",
                    ),
                ),
                (
                    "rac3",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 3 - lower right.",
                        verbose_name="rac3",
                    ),
                ),
                (
                    "rac4",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 4 - upper right).",
                        verbose_name="rac4",
                    ),
                ),
                (
                    "decc1",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 1 - upper left.",
                        verbose_name="decc1",
                    ),
                ),
                (
                    "decc2",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 2 - lower left.",
                        verbose_name="decc2",
                    ),
                ),
                (
                    "decc3",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 3 - lower right.",
                        verbose_name="decc3",
                    ),
                ),
                (
                    "decc4",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 4 - upper right).",
                        verbose_name="decc4",
                    ),
                ),
                (
                    "crossra0",
                    models.BooleanField(default=False, verbose_name="Cross RA 0"),
                ),
                (
                    "racmin",
                    models.FloatField(
                        help_text="Minimal and maximum right ascension respectively of the CCD cover.",
                        verbose_name="racmin",
                    ),
                ),
                (
                    "racmax",
                    models.FloatField(
                        help_text="Minimal and maximum right ascension respectively of the CCD cover.",
                        verbose_name="racmax",
                    ),
                ),
                (
                    "deccmin",
                    models.FloatField(
                        help_text="Minimum and maximum declination respectively of the CCD cover.",
                        verbose_name="deccmin",
                    ),
                ),
                (
                    "deccmax",
                    models.FloatField(
                        help_text="Minimum and maximum declination respectively of the CCD cover.",
                        verbose_name="deccmax",
                    ),
                ),
                (
                    "ra_size",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="CCD dimensions in degrees (width × height).",
                        max_digits=10,
                        verbose_name="ra_size",
                    ),
                ),
                (
                    "dec_size",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="CCD dimensions in degrees (width × height).",
                        max_digits=10,
                        verbose_name="dec_size",
                    ),
                ),
                (
                    "path",
                    models.TextField(
                        help_text="Path in the DES database where the image is stored.",
                        verbose_name="Path",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="Name of FITS file with a CCD image.",
                        max_length=256,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "compression",
                    models.CharField(
                        help_text="Compression format (.fz) used in FITS files",
                        max_length=5,
                        verbose_name="Compression",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exposure",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="Unique identifier for each image. pfw_attempt_id in DES database.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Exposure Id",
                    ),
                ),
                (
                    "nite",
                    models.DateField(
                        help_text="Night at which the observation was made.",
                        verbose_name="Night",
                    ),
                ),
                (
                    "date_obs",
                    models.DateTimeField(
                        help_text="Date and time of observation",
                        verbose_name="Observation Date",
                    ),
                ),
                (
                    "expnum",
                    models.BigIntegerField(
                        help_text="identifier for each image. (it also recorded in the file name)",
                        verbose_name="Expnum",
                    ),
                ),
                (
                    "band",
                    models.CharField(
                        choices=[
                            ("u", "u"),
                            ("g", "g"),
                            ("r", "r"),
                            ("i", "i"),
                            ("z", "z"),
                            ("Y", "Y"),
                        ],
                        help_text="Filter used to do the observation (u, g, r, i, z, Y).",
                        max_length=1,
                        verbose_name="Filter",
                    ),
                ),
                ("radeg", models.FloatField(verbose_name="RA (deg)")),
                ("decdeg", models.FloatField(verbose_name="Dec (deg)")),
                (
                    "exptime",
                    models.FloatField(
                        help_text="Exposure time of observation.",
                        verbose_name="Exposure time",
                    ),
                ),
                (
                    "cloud_apass",
                    models.FloatField(
                        help_text="Atmospheric extinction in magnitudes",
                        verbose_name="Cloud apass",
                    ),
                ),
                (
                    "cloud_nomad",
                    models.FloatField(
                        help_text="Atmospheric extinction in magnitudes",
                        verbose_name="Cloud nomad",
                    ),
                ),
                (
                    "t_eff",
                    models.FloatField(
                        help_text="Parameter related to image quality",
                        verbose_name="t_eff",
                    ),
                ),
                (
                    "release",
                    models.CharField(
                        help_text="Release has been removed from the ccd filename field. using this rule trim(split_part(path , /, 3))",
                        max_length=10,
                        verbose_name="Release",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkybotJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_initial", models.DateField(verbose_name="Date Initial")),
                ("date_final", models.DateField(verbose_name="Date Final")),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Stoped"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(auto_now_add=True, verbose_name="Start"),
                ),
                (
                    "finish",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "exposures",
                    models.BigIntegerField(default=0, verbose_name="Exposures"),
                ),
                (
                    "path",
                    models.CharField(
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        verbose_name="Path",
                    ),
                ),
                (
                    "results",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Filepath to the results.csv. this file contains the results of the job.",
                        max_length=2048,
                        null=True,
                        verbose_name="Results",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="des_skybot_run",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkybotPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ccd",
                    models.ForeignKey(
                        help_text="Field that identifies an CCD in the DES CCD table. represents desfile_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.ccd",
                        verbose_name="CCD",
                    ),
                ),
                (
                    "exposure",
                    models.ForeignKey(
                        help_text="Field that identifies an exposure in the Pointings table. represents pfw_attempt_id.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.exposure",
                        verbose_name="Exposure",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        help_text="Represents a specific position in the Skybot result.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="skybot.position",
                        verbose_name="Position",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(fields=["nite"], name="des_exposur_nite_bbf059_idx"),
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(
                fields=["date_obs"], name="des_exposur_date_ob_f351f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(
                fields=["release"], name="des_exposur_release_c66eaf_idx"
            ),
        ),
        migrations.AddField(
            model_name="ccd",
            name="exposure",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="des.exposure",
                verbose_name="Exposure",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="skybotposition",
            unique_together={("position", "exposure", "ccd")},
        ),
        migrations.AlterUniqueTogether(
            name="skybotjob",
            unique_together={("date_initial", "date_final")},
        ),
        migrations.AddIndex(
            model_name="ccd",
            index=models.Index(fields=["filename"], name="des_ccd_filenam_acd904_idx"),
        ),
        migrations.AddField(
            model_name="skybotposition",
            name="ticket",
            field=models.BigIntegerField(
                db_index=True,
                default=0,
                help_text="Id of the request made in the skybot. it serves to group all the positions that are of the same request.",
                verbose_name="Skybot Ticket",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="skybotjob",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="ccds",
            field=models.BigIntegerField(
                default=0,
                help_text="total ccds in the period of this job",
                verbose_name="CCDs",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="nights",
            field=models.BigIntegerField(
                default=0,
                help_text="total nights with exhibitions in the period of this job.",
                verbose_name="Nights",
            ),
        ),
        migrations.AlterField(
            model_name="skybotjob",
            name="exposures",
            field=models.BigIntegerField(
                default=0,
                help_text="total exposures that were run in this job",
                verbose_name="Exposures",
            ),
        ),
        migrations.CreateModel(
            name="DownloadCcdJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_initial", models.DateField(verbose_name="Date Initial")),
                ("date_final", models.DateField(verbose_name="Date Final")),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Stoped"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(auto_now_add=True, verbose_name="Start"),
                ),
                (
                    "finish",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "t_size_downloaded",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total size downloaded in this job.",
                        null=True,
                        verbose_name="Size Downloaded",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="des_download_ccd_job",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        blank=True,
                        help_text="(ucd=“meta.code.class;src.class”) Object class (TNO, Centaur, Trojan, etc.)",
                        max_length=24,
                        null=True,
                        verbose_name="Object classification",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="(ucd=“meta.id;meta.main”) Object name (official or provisional designation).",
                        max_length=32,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "asteroids",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total unique objects  in this job.",
                        null=True,
                        verbose_name="Asteroids",
                    ),
                ),
                (
                    "ccds_downloaded",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total CCDs downloaded in this job.",
                        null=True,
                        verbose_name="CCDs Downloaded",
                    ),
                ),
                (
                    "ccds_to_download",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total CCDs to be downloaded by this job.",
                        null=True,
                        verbose_name="CCDs to Download",
                    ),
                ),
                (
                    "nights",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total nights with ccds to be downloaded in this job.",
                        null=True,
                        verbose_name="Nights",
                    ),
                ),
                (
                    "estimated_execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Estimated Execution Time"
                    ),
                ),
                (
                    "estimated_t_size",
                    models.BigIntegerField(
                        blank=True,
                        default=0,
                        help_text="Total size estimated to download in this job.",
                        null=True,
                        verbose_name="Estimated Size to Download",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DownloadCcdJobResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(auto_now_add=True, verbose_name="Start"),
                ),
                (
                    "finish",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True,
                        default=None,
                        help_text="File Size in bytes",
                        null=True,
                        verbose_name="File Size",
                    ),
                ),
                (
                    "ccd",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.ccd",
                        verbose_name="CCD",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_results",
                        to="des.downloadccdjob",
                        verbose_name="Download CCD Job",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="asteroids",
            field=models.BigIntegerField(
                default=0,
                help_text="Total unique objects returned by skybot",
                verbose_name="Asteroids",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="ccds_with_asteroid",
            field=models.BigIntegerField(
                default=0,
                help_text="Total CCDs that have at least one object through the skybot",
                verbose_name="CCDs with Asteroid",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="exposures_with_asteroid",
            field=models.BigIntegerField(
                default=0,
                help_text="Total Exposures that have at least one object through the skybot",
                verbose_name="Exposures with Asteroid",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="positions",
            field=models.BigIntegerField(
                default=0,
                help_text="Total positions returned by skybot that are in DES ccds.",
                verbose_name="Positions",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="estimated_execution_time",
            field=models.DurationField(
                blank=True, null=True, verbose_name="Estimated Execution Time"
            ),
        ),
        migrations.AlterField(
            model_name="skybotjob",
            name="status",
            field=models.IntegerField(
                choices=[
                    (1, "Idle"),
                    (2, "Running"),
                    (3, "Completed"),
                    (4, "Failed"),
                    (5, "Aborted"),
                    (6, "Warning"),
                ],
                default=1,
                verbose_name="Status",
            ),
        ),
        migrations.CreateModel(
            name="SkybotJobResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ticket",
                    models.BigIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Id of the request made in the skybot. it serves to group all the positions that are of the same request.",
                        verbose_name="Skybot Ticket",
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        help_text="true if the exposure was successfully executed.",
                        verbose_name="Success",
                    ),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "positions",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="number of positions returned by skybot for this exposure",
                        verbose_name="Positions",
                    ),
                ),
                (
                    "inside_ccd",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="number of positions that are within any ccd of this exposure.",
                        verbose_name="Inside CCD",
                    ),
                ),
                (
                    "outside_ccd",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="number of positions are not in any ccd of this exposure.",
                        verbose_name="Outside CCD",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="name of the file with the results returned by skybot.",
                        max_length=100,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "exposure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.exposure",
                        verbose_name="Exposure",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_results",
                        to="des.skybotjob",
                        verbose_name="Skybot Job",
                    ),
                ),
                (
                    "ccds_with_asteroids",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="number of CCDs with Asteroids for this exposure",
                        verbose_name="CCDs With Asteroids",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="exposure",
            name="expnum",
        ),
        migrations.AddField(
            model_name="exposure",
            name="pfw_attempt_id",
            field=models.BigIntegerField(default=0, verbose_name="Pfw Attempt Id"),
        ),
        migrations.AlterField(
            model_name="exposure",
            name="id",
            field=models.BigIntegerField(
                help_text="Unique identifier for each image. expnum in DES database.",
                primary_key=True,
                serialize=False,
                verbose_name="Expnum",
            ),
        ),
        migrations.AlterField(
            model_name="exposure",
            name="release",
            field=models.CharField(
                help_text="Release has been retrieve from the ccd filename field. using this rule trim(split_part(path , /, 3))",
                max_length=10,
                verbose_name="Release",
            ),
        ),
        migrations.CreateModel(
            name="SummaryDynclass",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dynclass", models.TextField(verbose_name="Dynamic Class")),
                ("asteroids", models.IntegerField(verbose_name="Number of Asteroids")),
                ("ccds", models.IntegerField(verbose_name="Number of CCDs")),
                ("positions", models.IntegerField(verbose_name="Number of Positions")),
                ("u", models.IntegerField(verbose_name="Number of SSOs at u Band")),
                ("g", models.IntegerField(verbose_name="Number of SSOs at g Band")),
                ("r", models.IntegerField(verbose_name="Number of SSOs at r Band")),
                ("i", models.IntegerField(verbose_name="Number of SSOs at i Band")),
                ("z", models.IntegerField(verbose_name="Number of SSOs at z Band")),
                ("y", models.IntegerField(verbose_name="Number of SSOs at Y Band")),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_summary_dynclass",
                        to="des.skybotjob",
                        verbose_name="Skybot Job",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="summarydynclass",
            index=models.Index(
                fields=["dynclass"], name="des_summary_dynclas_b5a895_idx"
            ),
        ),
        migrations.CreateModel(
            name="SkybotByDynclass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        choices=[
                            ("Centaur", "Centaur"),
                            ("Comet", "Comet"),
                            ("Hungaria", "Hungaria"),
                            ("KBO", "KBO"),
                            ("MB", "MB"),
                            ("Mars-Crosser", "Mars-Crosser"),
                            ("NEA", "NEA"),
                            ("Planet", "Planet"),
                            ("Trojan", "Trojan"),
                        ],
                        max_length=12,
                        unique=True,
                        verbose_name="Dynamic Class",
                    ),
                ),
                ("nights", models.IntegerField(default=0, verbose_name="Nights")),
                ("ccds", models.IntegerField(default=0, verbose_name="CCDs")),
                ("asteroids", models.IntegerField(default=0, verbose_name="Asteroids")),
                ("positions", models.IntegerField(default=0, verbose_name="Positions")),
                ("u", models.IntegerField(default=0, verbose_name="Band u")),
                ("g", models.IntegerField(default=0, verbose_name="Band g")),
                ("r", models.IntegerField(default=0, verbose_name="Band r")),
                ("i", models.IntegerField(default=0, verbose_name="Band i")),
                ("z", models.IntegerField(default=0, verbose_name="Band z")),
                ("y", models.IntegerField(default=0, verbose_name="Band Y")),
            ],
        ),
        migrations.CreateModel(
            name="SkybotByYear",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        choices=[
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("2017", "2017"),
                            ("2018", "2018"),
                            ("2019", "2019"),
                        ],
                        max_length=4,
                        unique=True,
                        verbose_name="Year",
                    ),
                ),
                (
                    "nights",
                    models.IntegerField(
                        default=0, verbose_name="Nights with exposures"
                    ),
                ),
                ("exposures", models.IntegerField(default=0, verbose_name="Exposures")),
                (
                    "ccds",
                    models.IntegerField(default=0, verbose_name="CCDs with exposures"),
                ),
                (
                    "nights_analyzed",
                    models.IntegerField(default=0, verbose_name="Nights analyzed"),
                ),
                (
                    "exposures_analyzed",
                    models.IntegerField(default=0, verbose_name="Exposures analyzed"),
                ),
                (
                    "ccds_analyzed",
                    models.IntegerField(default=0, verbose_name="CCDs analyzed"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Observation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="(ucd=“meta.id;meta.main”) Object name (official or provisional designation).",
                        max_length=32,
                        verbose_name="Name",
                    ),
                ),
                (
                    "date_obs",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Date and time of observation already applied the DES correction.",
                        verbose_name="Observation Date",
                    ),
                ),
                (
                    "date_jd",
                    models.CharField(
                        help_text="Date and time of observation in Julian date already applied the DES correction.",
                        max_length=50,
                        verbose_name="Observation Date (JD)",
                    ),
                ),
                ("ra", models.FloatField(verbose_name="RA (deg)")),
                ("dec", models.FloatField(verbose_name="Dec (deg)")),
                ("offset_ra", models.FloatField(verbose_name="Offset RA (deg)")),
                ("offset_dec", models.FloatField(verbose_name="Offset Dec (deg)")),
                (
                    "mag_psf",
                    models.FloatField(blank=True, null=True, verbose_name="Mag PSF"),
                ),
                (
                    "mag_psf_err",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Mag PSF Error"
                    ),
                ),
                (
                    "asteroid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.asteroid",
                        verbose_name="Asteroid",
                    ),
                ),
                (
                    "ccd",
                    models.ForeignKey(
                        help_text="Field that identifies an CCD in the DES CCD table. represents desfile_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.ccd",
                        verbose_name="CCD",
                    ),
                ),
            ],
            options={
                "unique_together": {("asteroid", "ccd")},
            },
        ),
        migrations.CreateModel(
            name="AstrometryJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asteroids",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Asteroids that will be processed can be a single asteroid name or a list separated by ;",
                        null=True,
                        verbose_name="Asteroids",
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="(ucd=“meta.code.class;src.class”) Object class (TNO, Centaur, Trojan, etc.).",
                        max_length=24,
                        null=True,
                        verbose_name="Object classification",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Launched"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(blank=True, null=True, verbose_name="Start"),
                ),
                (
                    "finish",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "estimated_execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Estimated Execution Time"
                    ),
                ),
                (
                    "t_asteroids",
                    models.BigIntegerField(
                        default=0,
                        help_text="total asteroids that were run in this job",
                        verbose_name="Total Asteroids",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="astrometry_job",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "submit_time",
                    models.DateTimeField(
                        auto_now_add=True, null=True, verbose_name="Submit Time"
                    ),
                ),
                (
                    "traceback",
                    models.TextField(blank=True, null=True, verbose_name="Traceback"),
                ),
                (
                    "t_ccds",
                    models.BigIntegerField(
                        default=0,
                        help_text="total ccds that were run in this job",
                        verbose_name="Total CCDs",
                    ),
                ),
                (
                    "t_observations",
                    models.BigIntegerField(
                        default=0,
                        help_text="Total observations processed in this job",
                        verbose_name="Total Observations",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="downloadccdjobresult",
            name="ccd",
        ),
        migrations.RemoveField(
            model_name="downloadccdjobresult",
            name="job",
        ),
        migrations.DeleteModel(
            name="DownloadCcdJob",
        ),
        migrations.DeleteModel(
            name="DownloadCcdJobResult",
        ),
        migrations.AlterField(
            model_name="skybotjob",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="skybotjobresult",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="skybotposition",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="summarydynclass",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.DeleteModel(
            name="AstrometryJob",
        ),
        migrations.AddIndex(
            model_name="observation",
            index=models.Index(fields=["name"], name="des_observa_name_13e3e4_idx"),
        ),
        migrations.AddIndex(
            model_name="observation",
            index=models.Index(
                fields=["date_obs"], name="des_observa_date_ob_284449_idx"
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="summary",
            field=models.BooleanField(
                default=True,
                help_text="summary = True runs the methods that populate the job statistics tables.",
                verbose_name="Summary",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="debug",
            field=models.BooleanField(
                default=False,
                help_text="debug = False The files returned by skybot will be removed at the end of the job.",
                verbose_name="Debug",
            ),
        ),
        migrations.AddField(
            model_name="skybotjob",
            name="submit_time",
            field=models.DateTimeField(
                auto_now_add=True,
                default=django.utils.timezone.now,
                verbose_name="Submit Time",
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="OrbitTraceJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Aborting"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(blank=True, null=True, verbose_name="Start"),
                ),
                (
                    "end",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "exec_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "estimated_execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Estimated Execution Time"
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="des_orbitTrace_run",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
                (
                    "bsp_planetary",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.bspplanetary",
                        verbose_name="Planetary Ephemeris",
                    ),
                ),
                (
                    "leap_seconds",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.leapsecond",
                        verbose_name="Leap Second",
                    ),
                ),
                (
                    "submit_time",
                    models.DateTimeField(
                        auto_now_add=True,
                        default=django.utils.timezone.now,
                        verbose_name="Submit Time",
                    ),
                ),
                (
                    "match_radius",
                    models.FloatField(
                        default=2,
                        help_text="Exposure time of observation.",
                        verbose_name="Match Radius",
                    ),
                ),
                (
                    "traceback",
                    models.TextField(blank=True, null=True, verbose_name="Traceback"),
                ),
                (
                    "filter_type",
                    models.CharField(
                        choices=[
                            ("name", "Object name"),
                            ("dynclass", "Dynamic class (with subclasses)"),
                            ("base_dynclass", "Dynamic class"),
                        ],
                        max_length=15,
                        verbose_name="Filter Type",
                    ),
                ),
                ("filter_value", models.TextField(verbose_name="Filter Value")),
                (
                    "count_asteroids",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids selected to run this job",
                        verbose_name="Asteroids",
                    ),
                ),
                (
                    "count_ccds",
                    models.IntegerField(
                        default=0,
                        help_text="Total ccds processed in this job.",
                        verbose_name="CCDs",
                    ),
                ),
                (
                    "count_observations",
                    models.IntegerField(
                        default=0,
                        help_text="Total observations identified by the orbit trace.",
                        verbose_name="Observations Count",
                    ),
                ),
                (
                    "count_failures",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids that failed at least one of the steps.",
                        verbose_name="Failures Count",
                    ),
                ),
                (
                    "count_success",
                    models.IntegerField(
                        default=0,
                        help_text="Total asteroids successfully executed in all steps.",
                        verbose_name="Success",
                    ),
                ),
                (
                    "h_exec_time",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Execution Time formated with humanize.",
                        max_length=100,
                        null=True,
                        verbose_name="Human Exec Time",
                    ),
                ),
                (
                    "debug",
                    models.BooleanField(
                        default=False,
                        help_text="Debug False all log files and intermediate results will be deleted at the end of the job.",
                        verbose_name="Debug",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "avg_exec_time_asteroid",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="average execution time per asteroid. (seconds)",
                        null=True,
                        verbose_name="Average Execution Time Asteroid",
                    ),
                ),
                (
                    "avg_exec_time_ccd",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="average execution time per ccd. (seconds)",
                        null=True,
                        verbose_name="Average Execution Time CCD",
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="observation",
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name="observation",
            name="ccd",
        ),
        migrations.AddField(
            model_name="observation",
            name="ccd_id",
            field=models.IntegerField(
                default=0,
                help_text="Field that identifies an CCD in the DES CCD table. represents desfile_id",
                verbose_name="CCD",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="observation",
            unique_together={("name", "ccd_id")},
        ),
        migrations.AddField(
            model_name="observation",
            name="created_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Created at"),
        ),
        migrations.CreateModel(
            name="OrbitTraceJobResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Asteroid Name"),
                ),
                (
                    "base_dynclass",
                    models.CharField(
                        max_length=100, verbose_name="Asteroid Base DynClass"
                    ),
                ),
                (
                    "dynclass",
                    models.CharField(max_length=100, verbose_name="Asteroid DynClass"),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(1, "Success"), (2, "Failed")],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "spk_id",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Spk Id"
                    ),
                ),
                (
                    "observations",
                    models.IntegerField(
                        default=0,
                        help_text="Observations Count",
                        verbose_name="Observations Count",
                    ),
                ),
                (
                    "ccds",
                    models.IntegerField(
                        default=0, help_text="CCDS Count", verbose_name="CCDS Count"
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "asteroid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tno.asteroid",
                        verbose_name="Asteroid",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.orbittracejob",
                        verbose_name="Orbit Trace Job",
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Asteroid Number",
                    ),
                ),
                (
                    "exec_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrbitTraceJobStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "step",
                    models.IntegerField(
                        help_text="Identification of the step in the pipeline.",
                        verbose_name="Step",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Warning"),
                            (7, "Aborting"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        default=0,
                        help_text="Total items to be processed in the step.",
                        verbose_name="Total Count",
                    ),
                ),
                (
                    "current",
                    models.IntegerField(
                        default=0,
                        help_text="Current position in execution.",
                        verbose_name="Current",
                    ),
                ),
                (
                    "average_time",
                    models.FloatField(
                        default=0,
                        help_text="Average time per item in seconds.",
                        verbose_name="Average Time",
                    ),
                ),
                (
                    "time_estimate",
                    models.FloatField(
                        default=0,
                        help_text="Estimated time to complete the step in seconds.",
                        verbose_name="Estimated Time",
                    ),
                ),
                (
                    "success",
                    models.IntegerField(
                        default=0,
                        help_text="Number of items successfully executed.",
                        verbose_name="Success",
                    ),
                ),
                (
                    "failures",
                    models.IntegerField(
                        default=0,
                        help_text="Number of items that failed.",
                        verbose_name="Failures",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now_add=True, verbose_name="Updated"),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_status",
                        to="des.orbittracejob",
                        verbose_name="Orbit Trace Job",
                    ),
                ),
                (
                    "task",
                    models.CharField(
                        default="",
                        help_text="Name of the task being executed.",
                        max_length=100,
                        verbose_name="Task",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="observation",
            name="asteroid",
        ),
    ]
