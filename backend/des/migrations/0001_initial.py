# Generated by Django 2.0.12 on 2020-06-04 17:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("skybot", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Ccd",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="Unique identifier for each CCD. desfile_id in DES database.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="CCD Id",
                    ),
                ),
                (
                    "ccdnum",
                    models.IntegerField(
                        help_text="CCD Number (1, 2, ..., 62)", verbose_name="CCD"
                    ),
                ),
                (
                    "ra_cent",
                    models.FloatField(
                        help_text="Right ascension of the CCD center", verbose_name="RA"
                    ),
                ),
                (
                    "dec_cent",
                    models.FloatField(
                        help_text="Declination of the CCD center", verbose_name="Dec"
                    ),
                ),
                (
                    "rac1",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 1 - upper left.",
                        verbose_name="rac1",
                    ),
                ),
                (
                    "rac2",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 2 - lower left.",
                        verbose_name="rac2",
                    ),
                ),
                (
                    "rac3",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 3 - lower right.",
                        verbose_name="rac3",
                    ),
                ),
                (
                    "rac4",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 4 - upper right).",
                        verbose_name="rac4",
                    ),
                ),
                (
                    "decc1",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 1 - upper left.",
                        verbose_name="decc1",
                    ),
                ),
                (
                    "decc2",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 2 - lower left.",
                        verbose_name="decc2",
                    ),
                ),
                (
                    "decc3",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 3 - lower right.",
                        verbose_name="decc3",
                    ),
                ),
                (
                    "decc4",
                    models.FloatField(
                        help_text="CCD Corner Coordinates 4 - upper right).",
                        verbose_name="decc4",
                    ),
                ),
                (
                    "crossra0",
                    models.BooleanField(default=False, verbose_name="Cross RA 0"),
                ),
                (
                    "racmin",
                    models.FloatField(
                        help_text="Minimal and maximum right ascension respectively of the CCD cover.",
                        verbose_name="racmin",
                    ),
                ),
                (
                    "racmax",
                    models.FloatField(
                        help_text="Minimal and maximum right ascension respectively of the CCD cover.",
                        verbose_name="racmax",
                    ),
                ),
                (
                    "deccmin",
                    models.FloatField(
                        help_text="Minimum and maximum declination respectively of the CCD cover.",
                        verbose_name="deccmin",
                    ),
                ),
                (
                    "deccmax",
                    models.FloatField(
                        help_text="Minimum and maximum declination respectively of the CCD cover.",
                        verbose_name="deccmax",
                    ),
                ),
                (
                    "ra_size",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="CCD dimensions in degrees (width × height).",
                        max_digits=10,
                        verbose_name="ra_size",
                    ),
                ),
                (
                    "dec_size",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="CCD dimensions in degrees (width × height).",
                        max_digits=10,
                        verbose_name="dec_size",
                    ),
                ),
                (
                    "path",
                    models.TextField(
                        help_text="Path in the DES database where the image is stored.",
                        verbose_name="Path",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="Name of FITS file with a CCD image.",
                        max_length=256,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "compression",
                    models.CharField(
                        help_text="Compression format (.fz) used in FITS files",
                        max_length=5,
                        verbose_name="Compression",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exposure",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="Unique identifier for each image. pfw_attempt_id in DES database.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Exposure Id",
                    ),
                ),
                (
                    "nite",
                    models.DateField(
                        help_text="Night at which the observation was made.",
                        verbose_name="Night",
                    ),
                ),
                (
                    "date_obs",
                    models.DateTimeField(
                        help_text="Date and time of observation",
                        verbose_name="Observation Date",
                    ),
                ),
                (
                    "expnum",
                    models.BigIntegerField(
                        help_text="identifier for each image. (it also recorded in the file name)",
                        verbose_name="Expnum",
                    ),
                ),
                (
                    "band",
                    models.CharField(
                        choices=[
                            ("u", "u"),
                            ("g", "g"),
                            ("r", "r"),
                            ("i", "i"),
                            ("z", "z"),
                            ("Y", "Y"),
                        ],
                        help_text="Filter used to do the observation (u, g, r, i, z, Y).",
                        max_length=1,
                        verbose_name="Filter",
                    ),
                ),
                ("radeg", models.FloatField(verbose_name="RA (deg)")),
                ("decdeg", models.FloatField(verbose_name="Dec (deg)")),
                (
                    "exptime",
                    models.FloatField(
                        help_text="Exposure time of observation.",
                        verbose_name="Exposure time",
                    ),
                ),
                (
                    "cloud_apass",
                    models.FloatField(
                        help_text="Atmospheric extinction in magnitudes",
                        verbose_name="Cloud apass",
                    ),
                ),
                (
                    "cloud_nomad",
                    models.FloatField(
                        help_text="Atmospheric extinction in magnitudes",
                        verbose_name="Cloud nomad",
                    ),
                ),
                (
                    "t_eff",
                    models.FloatField(
                        help_text="Parameter related to image quality",
                        verbose_name="t_eff",
                    ),
                ),
                (
                    "release",
                    models.CharField(
                        help_text="Release has been removed from the ccd filename field. using this rule trim(split_part(path , /, 3))",
                        max_length=10,
                        verbose_name="Release",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkybotJob",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_initial", models.DateField(verbose_name="Date Initial")),
                ("date_final", models.DateField(verbose_name="Date Final")),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Idle"),
                            (2, "Running"),
                            (3, "Completed"),
                            (4, "Failed"),
                            (5, "Aborted"),
                            (6, "Stoped"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(auto_now_add=True, verbose_name="Start"),
                ),
                (
                    "finish",
                    models.DateTimeField(blank=True, null=True, verbose_name="Finish"),
                ),
                (
                    "execution_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Execution Time"
                    ),
                ),
                (
                    "exposures",
                    models.BigIntegerField(default=0, verbose_name="Exposures"),
                ),
                (
                    "path",
                    models.CharField(
                        help_text="Path to the directory where the job data is located.",
                        max_length=2048,
                        verbose_name="Path",
                    ),
                ),
                (
                    "results",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Filepath to the results.csv. this file contains the results of the job.",
                        max_length=2048,
                        null=True,
                        verbose_name="Results",
                    ),
                ),
                (
                    "error",
                    models.TextField(blank=True, null=True, verbose_name="Error"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="des_skybot_run",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkybotPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ccd",
                    models.ForeignKey(
                        help_text="Field that identifies an CCD in the DES CCD table. represents desfile_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.Ccd",
                        verbose_name="CCD",
                    ),
                ),
                (
                    "exposure",
                    models.ForeignKey(
                        help_text="Field that identifies an exposure in the Pointings table. represents pfw_attempt_id.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="des.Exposure",
                        verbose_name="Exposure",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        help_text="Represents a specific position in the Skybot result.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="skybot.Position",
                        verbose_name="Position",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(fields=["nite"], name="des_exposur_nite_bbf059_idx"),
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(
                fields=["date_obs"], name="des_exposur_date_ob_f351f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exposure",
            index=models.Index(
                fields=["release"], name="des_exposur_release_c66eaf_idx"
            ),
        ),
        migrations.AddField(
            model_name="ccd",
            name="exposure",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="des.Exposure",
                verbose_name="Exposure",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="skybotposition",
            unique_together={("position", "exposure", "ccd")},
        ),
        migrations.AlterUniqueTogether(
            name="skybotjob",
            unique_together={("date_initial", "date_final")},
        ),
        migrations.AddIndex(
            model_name="ccd",
            index=models.Index(fields=["filename"], name="des_ccd_filenam_acd904_idx"),
        ),
    ]
