version: "3.6"
volumes:
  rabbitmq-data:
  postgres-data:
  
services:

  # Backend Django
  backend: &backend
    build: ./backend
    user: ${TNO_UID:-31670}:${TNO_GID:-15010}
    group_add:
      - "15007"
      - "15010"    
    volumes:
      # Diretório de Código fonte da aplicação
      - ${TNO_PROJ_DIR:-.}/backend:/usr/src/app
      # Arquivo de Variaveis de configuração do Django
      - ${TNO_PROJ_DIR:-.}/local_settings.py:/usr/src/app/coreAdmin/local_settings.py
      # Diretório de Logs
      - ${TNO_PROJ_DIR:-.}/logs:/logs
      # Diretório de Dados
      - ${TNO_PROJ_DIR:-.}/data:/archive      
    env_file:
      - .env
    command: /start.sh      
    depends_on:
      - database
      - rabbit

  # Frontend React
  frontend:
    image: node:18.12.1
    working_dir: /app
    volumes:
      - ${TNO_PROJ_DIR:-.}/frontend:/app
      - ${TNO_PROJ_DIR:-.}/frontend/node_modules:/app/node_modules
    stdin_open: true
    environment:
      # Fixes bug where websocket connection is fixed to default port 3000
      - WDS_SOCKET_PORT=0
    command: yarn start

  predict_occultation:
    build: ./predict_occultation
    group_add:
      - "15007"
      - "15010"
      - "900"
    # Para executar os pipelines
    # Utilizar daemon.sh Para Executar automaticamente conforme sao criados no portal
    command: /app/src/daemon.sh
    # Utilizar sleep infinite Para Executar manualmente
    # command: /bin/sh -c "while sleep 1000; do :; done"
    network_mode: "host"
    volumes:
      - ${TNO_PROJ_DIR:-.}/predict_occultation:/app
      - ${TNO_PROJ_DIR:-.}/data/predict_occultation:/app/outputs/predict_occultation
    environment:
      - PARSL_ENV=local
      - PREDICT_OUTPUTS=/app/outputs/predict_occultation

  # Copia do serviço backend, mas executando outro comando
  celery_worker: &celery_worker
    <<: *backend
    command: /start_worker.sh
    depends_on:
      - backend

  # Copia do serviço backend, mas executando outro comando
  celery_beat: &celery_beat
    <<: *backend
    command: /start_beat.sh

  # Handling Periodic Tasks in Django with Celery and Docker
  # https://testdriven.io/blog/django-celery-periodic-tasks/
  # https://testdriven.io/courses/django-celery/docker/
  celery_flower: &celery_flower
    <<: *backend
    command: /start_flower.sh
    depends_on:
      - backend

  # Database
  database:
    image: linea/postgresql_q3c:latest
    env_file:
      - .env
    ports:
      # Deixar a porta exposta para desenvolvimento isto permite:
      #  - Outros apps como Dbeaver acessar o banco de dados
      #  - Container pipelines acessar o banco administrativo.
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database_subset:/data

  # Message-Broker Software RabbitMQ
  rabbit:
    image: rabbitmq:3-management-alpine
    env_file:
      - .env
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/

  # Servidor Web NGINX
  nginx:
    image: nginx:latest
    # image: linea/tno:frontend_teste
    ports:
      - ${TNO_PORT:-80}:8080
    volumes:
      # Arquivo de configuração do Ngnix para este ambiente.
      - ${TNO_PROJ_DIR:-.}/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      # Diretório onde o backend manipula arquivos, e que deve ficar acessivel ao servidor web.
      - ${TNO_PROJ_DIR:-.}/data:/var/www/data
    depends_on:
      - backend
      - frontend
      - celery_flower
      - rabbit



  # https://medium.com/testing-with-cypress/running-cypress-tests-in-docker-containers-using-different-docker-images-2dee3450881e
  # cypress:
  #   image: cypress/included:3.4.0
  #   entrypoint: cypress run
  #   # image: node:18.12.1
  #   # user: 1000:1000
  #   environment:
  #     - CYPRESS_baseUrl=http://nginx:8080/
  #   volumes:
  #     - ./cypress/:/e2e
  #   working_dir: /e2e
  #   depends_on:
  #     - backend
  #     - frontend
  #   ports:
  #     - 8080:
  # cypress:
  #   image: cypress/included:13.6.6
  #   working_dir: /e2e
  #   entrypoint: cypress open --project /e2e -b chrome
  #   network_mode: host
  #   # image: node:18.12.1
  #   user: 1000:1000
  #   environment:
  #     CYPRESS_VIDEO: 'false'
  #     CYPRESS_BASE_URL: 'http://localhost'
  #     DISPLAY: $DISPLAY
  #     WAYLAND_DISPLAY: $WAYLAND_DISPLAY
  #     XDG_RUNTIME_DIR: $XDG_RUNTIME_DIR
  #     PULSE_SERVER: $PULSE_SERVER
  #   volumes:
  #     - ./cypress/:/e2e
  #     - ~/.Xauthority:/root/.Xauthority:rw
  #     - /tmp/.X11-unix:/tmp/.X11-unix
  #     - /mnt/wslg:/mnt/wslg


