version: "3.6"
services:
  # Frontend React
  frontend:
    image: node:18.12.1
    working_dir: /app
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
    stdin_open: true
    environment:
      # Fixes bug where websocket connection is fixed to default port 3000
      - WDS_SOCKET_PORT=0
    command: yarn start

  # Backend Django
  backend: &backend
    user: "1000:1000"
    build: ./backend
    command: /start.sh
    volumes:
      # Diretório de Código fonte da aplicação
      - ./backend:/usr/src/app
      # Arquivo de Variaveis de ambiente
      - ./local_settings.py:/usr/src/app/coreAdmin/local_settings.py
      # Diretório de Logs
      - ./log:/log
      # Diretório de Dados
      - ./archive:/archive
    depends_on:
      - database
      - rabbit

  # Copia do serviço backend, mas executando outro comando
  celery_worker: &celery_worker
    <<: *backend
    command: /start_worker.sh
    depends_on:
      - backend

  # Copia do serviço backend, mas executando outro comando
  celery_beat: &celery_beat
    <<: *backend
    command: /start_beat.sh

  # Handling Periodic Tasks in Django with Celery and Docker
  # https://testdriven.io/blog/django-celery-periodic-tasks/
  # https://testdriven.io/courses/django-celery/docker/
  celery_flower: &celery_flower
    <<: *backend
    command: /start_flower.sh
    depends_on:
      - backend

  # Database
  database:
    image: linea/postgresql_q3c:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      # Deixar a porta exposta para desenvolvimento
      # isto permite:
      #  - Outros apps como Dbeaver acessar o banco de dados
      #  - Container pipelines acessar o banco administrativo.
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database_subset:/data

  # Message-Broker Software RabbitMQ
  rabbit:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: tno
      RABBITMQ_DEFAULT_PASS: adminadmin
      RABBITMQ_DEFAULT_VHOST: tno_vhost
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/

  # Servidor Web NGINX
  nginx:
    image: nginx:latest
    # build: ./frontend
    ports:
      - 80:8080
    volumes:
      # Arquivo de configuração do Ngnix para este ambiente.
      - ./nginx-proxy-development.conf:/etc/nginx/conf.d/default.conf:ro
      # Diretório onde o backend manipula arquivos, e que deve ficar acessivel ao servidor web.
      - ./archive:/var/www/data
    depends_on:
      - backend
      - frontend
      - celery_flower
      - rabbit

  pipelines:
    build: ./pipelines
    # Para executar os pipelines
    # Utilizar daemon.sh Para Executar automaticamente conforme sao criados no portal
    command: /app/daemon.sh
    # Utilizar sleep infinite Para Executar manualmente
    # command: /bin/sh -c "while sleep 1000; do :; done"
    network_mode: "host"
    volumes:
      - ./pipelines/src:/app/src
      - ./archive:/app/outputs
    environment:
      # Acesso ao DB de Catalogo e Administrativo, caso localhost não funcione utilizar o host.docker.internal.
      # Usando Localhost
      - DB_URI=postgresql+psycopg2://untrustedprod:untrusted@localhost:3307/prod_gavo
      - DB_URI_ADMIN=postgresql+psycopg2://tnouseradmindev:TnoDev405060@localhost:3307/tnodbdev
      # Usando host.docker.internal
      # - DB_URI=postgresql+psycopg2://untrustedprod:untrusted@host.docker.internal:3307/prod_gavo
      # - DB_URI_ADMIN=postgresql+psycopg2://postgres:postgres@host.docker.internal:5432/postgres
      - USER=apptno
      - PARSL_ENV=local # PARSL_ENV define onde será o processamento: local ou linea (Slurm)
      - PREDICT_OUTPUTS=/app/outputs/predict_occultation

  predict_occultation:
    build: ./predict_occultation
    # Para executar os pipelines
    # Utilizar daemon.sh Para Executar automaticamente conforme sao criados no portal
    command: /app/src/daemon.sh
    # Utilizar sleep infinite Para Executar manualmente
    # command: /bin/sh -c "while sleep 1000; do :; done"
    network_mode: "host"
    volumes:
      - ./predict_occultation:/app
      - ./archive/predict_occultation:/app/outputs/predict_occultation
    environment:
      # Acesso ao DB de Catalogo e Administrativo, caso localhost não funcione utilizar o host.docker.internal.
      # Usando Localhost
      - DB_URI=postgresql+psycopg2://untrustedprod:untrusted@localhost:3307/prod_gavo
      - DB_URI_ADMIN=postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
      # # Usando host.docker.internal
      # - DB_URI=postgresql+psycopg2://untrustedprod:untrusted@host.docker.internal:3307/prod_gavo
      # - DB_URI_ADMIN=postgresql+psycopg2://postgres:postgres@host.docker.internal:5432/postgres
      - PARSL_ENV=local # PARSL_ENV define onde será o processamento: local ou linea (Slurm)

volumes:
  rabbitmq-data:
  postgres-data:
