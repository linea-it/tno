from django.db import models

class Position(models.Model):
    """
        Table generated by SkyBoT which has the solar system objects identified
        in DES images (for more detailssee:http://vo.imcce.fr/webservices/skybot/?conesearch)
    """
    name = models.CharField(
        max_length=32,
        verbose_name='Name',
        help_text='(ucd=“meta.id;meta.main”) Object name (official or provisional designation).'
    )

    number = models.CharField(
        max_length=35, default=None, null=True, blank=True,
        verbose_name='Number',
        help_text='(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).',
    )

    dynclass = models.CharField(
        max_length=24,
        verbose_name='Object classification',
        help_text='(ucd=“meta.code.class;src.class”) Object class (TNO, Centaur, Trojan, etc.).'
    )

    ra = models.CharField(
        max_length=20,
        verbose_name='RA',
        help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object.'
    )

    dec = models.CharField(
        max_length=20,
        verbose_name='Dec',
        help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object.'
    )

    raj2000 = models.FloatField(
        verbose_name='RA (deg)',
        help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object in degrees.'
    )

    decj2000 = models.FloatField(
        verbose_name='Dec (deg)',
        help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object in degrees.'
    )

    mv = models.FloatField(
        verbose_name='Mv',
        help_text='(ucd=“phot.mag;em.opt.V”) Visual magnitude',
        default=None, null=True, blank=True
    )

    errpos = models.FloatField(
        verbose_name='ErrPos',
        help_text='(ucd=“stat.error.sys”) Uncertainty on the (RA,DEC) coordinates',
        default=None, null=True, blank=True
    )

    d = models.FloatField(
        verbose_name='d',
        help_text='(ucd="pos.ang") Body-to-center angular distance',
        default=None, null=True, blank=True
    )

    dracosdec = models.FloatField(
        verbose_name='dRAcosDec',
        help_text='(ucd=“pos.pm;pos.eq.ra”) Motion in right ascension d(RA)cos(DEC)',
        default=None, null=True, blank=True
    )

    ddec = models.FloatField(
        verbose_name='dDEC',
        help_text='(ucd=“pos.pm;pos.eq.dec”) Motion in declination d(DEC)',
        default=None, null=True, blank=True
    )

    dgeo = models.FloatField(
        verbose_name='Dgeo',
        help_text='(ucd=“phys.distance”) Distance from observer',
        default=None, null=True, blank=True
    )

    dhelio = models.FloatField(
        verbose_name='Dhelio',
        help_text='(ucd=“phys.distance”) Distance from the Sun',
        default=None, null=True, blank=True
    )

    phase = models.FloatField(
        verbose_name='Phase',
        help_text='(ucd=“pos.phaseAng”) Phase angle, e.g. elongation of earth from sun as seen from object',
        default=None, null=True, blank=True
    )

    solelong = models.FloatField(
        verbose_name='SolElong',
        help_text='(ucd=“pos.angDistance”) Solar elongation, e.g. elongation of object from sun as seen from Earth',
        default=None, null=True, blank=True
    )

    px = models.FloatField(
        verbose_name='Px',
        help_text='(ucd=“src.orbital.pos;meta.id.x”) Mean J2000 heliocentric position vector, x component',
        default=None, null=True, blank=True
    )

    py = models.FloatField(
        verbose_name='Py',
        help_text='(ucd=“src.orbital.pos;meta.id.y”) Mean J2000 heliocentric position vector, y component',
        default=None, null=True, blank=True
    )

    pz = models.FloatField(
        verbose_name='Pz',
        help_text='(ucd=“src.orbital.pos;meta.id.z”) Mean J2000 heliocentric position vector, z component',
        default=None, null=True, blank=True
    )

    vx = models.FloatField(
        verbose_name='Vx',
        help_text='(ucd=“src.veloc.orbital;meta.id.x”) Mean J2000 heliocentric velocity vector, x component',
        default=None, null=True, blank=True
    )

    vy = models.FloatField(
        verbose_name='Vy',
        help_text='(ucd=“src.veloc.orbital;meta.id.y”) Mean J2000 heliocentric velocity vector, y component',
        default=None, null=True, blank=True
    )

    vz = models.FloatField(
        verbose_name='Vz',
        help_text='(ucd=“src.veloc.orbital;meta.id.z”) Mean J2000 heliocentric velocity vector, z component',
        default=None, null=True, blank=True
    )

    jdref = models.FloatField(
        verbose_name='JDRef',
        help_text='(ucd=“time.epoch”) Reference epoch of the position/velocity vector',
        default=None, null=True, blank=True
    )

    ticket = models.BigIntegerField(
        verbose_name='Skybot Ticket',
        help_text='Id of the request made in the skybot. it serves to group all the positions that are of the same request.',
        default=0,
        db_index=True
    )

    class Meta:
        # TODO: Rever esta regra é possivel que o não precise do ticket, apenas name, ra e dec para identificar que seja unico.
        # A mesma posição não pode se repetir no resultado de uma requisição.
        unique_together = ('name', 'raj2000', 'decj2000', 'ticket')

        indexes = [
            models.Index(fields=['number']),
            models.Index(fields=['name']),
            models.Index(fields=['dynclass']),
            models.Index(fields=['ticket']),
        ]

    def __str__(self):
        return str(self.name)