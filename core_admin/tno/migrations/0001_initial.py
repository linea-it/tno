# Generated by Django 2.0.3 on 2019-03-22 13:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Internal Name')),
                ('display_name', models.CharField(max_length=128, verbose_name='Display Name')),
                ('database', models.CharField(blank=True, default='catalog', help_text='Database identifier in settings', max_length=128, null=True, verbose_name='Database')),
                ('schema', models.CharField(blank=True, max_length=128, null=True, verbose_name='Schema name')),
                ('tablename', models.CharField(help_text='Tablename without schema', max_length=128, verbose_name='Tablename')),
                ('ra_property', models.CharField(default='ra', help_text='name of the column that represents the RA in degrees', max_length=128, verbose_name='RA Property')),
                ('dec_property', models.CharField(default='dec', help_text='name of the column that represents the Dec in degrees', max_length=128, verbose_name='Dec Property')),
                ('rows', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of rows')),
                ('columns', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of columns')),
                ('size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Size in bytes')),
                ('registration_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Registration Date')),
            ],
        ),
        migrations.CreateModel(
            name='CcdImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desfile_id', models.BigIntegerField(blank=True, default=None, help_text='Unique identifier for each CCD.', null=True, verbose_name='CCD Id')),
                ('filename', models.CharField(help_text='Name of FITS file with a CCD image.', max_length=256, verbose_name='Filename')),
                ('download_start_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Download Start')),
                ('download_finish_time', models.DateTimeField(blank=True, null=True, verbose_name='Download finish')),
                ('file_size', models.PositiveIntegerField(blank=True, default=None, help_text='File Size in bytes', null=True, verbose_name='File Size')),
            ],
        ),
        migrations.CreateModel(
            name='CustomList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('displayname', models.CharField(help_text='List name', max_length=128, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('database', models.CharField(blank=True, help_text='Database identifier in settings', max_length=128, null=True, verbose_name='Database')),
                ('schema', models.CharField(blank=True, max_length=128, null=True, verbose_name='Schema')),
                ('tablename', models.CharField(help_text='Tablename without schema', max_length=128, verbose_name='Tablename')),
                ('asteroids', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of Asteroids')),
                ('rows', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of rows')),
                ('n_columns', models.PositiveIntegerField(blank=True, null=True, verbose_name='Num of columns')),
                ('columns', models.CharField(blank=True, help_text='Column names separated by comma.', max_length=1024, null=True, verbose_name='Columns')),
                ('size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Size in bytes')),
                ('creation_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('creation_time', models.FloatField(blank=True, help_text='Creation Time in seconds', null=True, verbose_name='Creation Time')),
                ('sql', models.TextField(blank=True, help_text='SQL for the table contents to be created', null=True, verbose_name='SQL')),
                ('sql_creation', models.TextField(blank=True, help_text='Sql used in table creation', null=True, verbose_name='SQL Creation')),
                ('filter_name', models.CharField(blank=True, help_text='Filter By Object name.', max_length=32, null=True, verbose_name='Filter Name')),
                ('filter_dynclass', models.TextField(blank=True, help_text='Filter by Object class (TNO, Centaur, Trojan, etc.).', null=True, verbose_name='Filter Classification')),
                ('filter_magnitude', models.FloatField(blank=True, help_text='Filter by Object Magnitude', null=True, verbose_name='Filter Magnitude')),
                ('filter_diffdatenights', models.FloatField(blank=True, help_text='Filter by minimun difference time between observations', null=True, verbose_name='Filter diff nights')),
                ('filter_morefilter', models.BooleanField(default=False, help_text='Filter by objects with more than one filter in the some night', verbose_name='Filter more Bands')),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('error', 'Error')], default='pending', max_length=10, null=True, verbose_name='Status')),
                ('error_msg', models.TextField(blank=True, null=True, verbose_name='Error Message')),
            ],
        ),
        migrations.CreateModel(
            name='JohnstonArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, default=None, help_text='(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).', max_length=6, null=True, verbose_name='Number')),
                ('name', models.CharField(blank=True, default=None, help_text='(ucd=“meta.id;meta.main”) Object name (official or provisional designation).', max_length=32, null=True, verbose_name='Name')),
                ('provisional_designation', models.CharField(max_length=32, verbose_name='Provisional Designation')),
                ('dynamical_class', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Dynamical Class')),
                ('a', models.FloatField(blank=True, default=None, null=True, verbose_name='a (AU)')),
                ('e', models.FloatField(blank=True, default=None, null=True, verbose_name='e')),
                ('perihelion_distance', models.FloatField(blank=True, default=None, help_text='q (AU) perihelion distance', null=True, verbose_name='perihelion distance')),
                ('aphelion_distance', models.FloatField(blank=True, default=None, help_text='Q (AU) aphelion distance', null=True, verbose_name='aphelion distance')),
                ('i', models.FloatField(blank=True, default=None, null=True, verbose_name='i (deg)')),
                ('diameter', models.FloatField(blank=True, default=None, null=True, verbose_name='Diameter (Km)')),
                ('diameter_flag', models.BooleanField(default=False, help_text='Diameter values marked by True are estimated assuming an albedo of 0.09 (or for secondary components, assuming the same albedo as the primary). Remaining diameter values have been determined by various methods (combined optical/thermal observations, dynamical fits/assumed densities for binaries, direct imagery, or stellar occultation).', verbose_name='Diameter Flag')),
                ('albedo', models.FloatField(blank=True, default=None, null=True, verbose_name='Albedo')),
                ('b_r_mag', models.FloatField(blank=True, default=None, help_text='B-R magnitude is the difference between blue filter magnitude and red filter magnitude; values greater than 1.03 indicate spectra redder than that of the Sun.', null=True, verbose_name='B-R mag')),
                ('taxon', models.CharField(blank=True, default=None, help_text='Taxonomic type is from Belskaya et al., 2015, Icarus, 250:482-491.', max_length=10, null=True, verbose_name='Taxon Type')),
                ('density', models.FloatField(blank=True, default=None, null=True, verbose_name='Density (g/cm^3)')),
                ('known_components', models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name="known add'l components")),
                ('discovery', models.DateField(blank=True, default=None, help_text='Discovery Year-Month', null=True, verbose_name='Discovery')),
                ('updated', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Updated')),
            ],
        ),
        migrations.CreateModel(
            name='Pointing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pfw_attempt_id', models.BigIntegerField(help_text='Unique identifier for each image (1 image is composed by 62 CCDs)', verbose_name='Image Id')),
                ('desfile_id', models.BigIntegerField(help_text='Unique identifier for each CCD.', verbose_name='CCD Id')),
                ('nite', models.DateField(help_text='Night at which the observation was made.', verbose_name='Night')),
                ('date_obs', models.DateTimeField(help_text='Date and time of observation', verbose_name='Observation Date')),
                ('expnum', models.BigIntegerField(help_text='Unique identifier for each image, same function as pfw_attenp_id (it also recorded in the file name)', verbose_name='Exposure')),
                ('ccdnum', models.IntegerField(help_text='CCD Number (1, 2, ..., 62)', verbose_name='CCD')),
                ('band', models.CharField(choices=[('u', 'u'), ('g', 'g'), ('r', 'r'), ('i', 'i'), ('z', 'z'), ('Y', 'Y')], help_text='Filter used to do the observation (u, g, r, i, z, Y).', max_length=1, verbose_name='Filter')),
                ('exptime', models.FloatField(help_text='Exposure time of observation.', verbose_name='Exposure time')),
                ('cloud_apass', models.FloatField(help_text='Atmospheric extinction in magnitudes', verbose_name='Cloud apass')),
                ('cloud_nomad', models.FloatField(help_text='Atmospheric extinction in magnitudes', verbose_name='Cloud nomad')),
                ('t_eff', models.FloatField(help_text='Parameter related to image quality', verbose_name='t_eff')),
                ('crossra0', models.BooleanField(default=False, verbose_name='Cross RA 0')),
                ('radeg', models.FloatField(verbose_name='RA (deg)')),
                ('decdeg', models.FloatField(verbose_name='Dec (deg)')),
                ('racmin', models.FloatField(help_text='Minimal and maximum right ascension respectively of the CCD cover.', verbose_name='racmin')),
                ('racmax', models.FloatField(help_text='Minimal and maximum right ascension respectively of the CCD cover.', verbose_name='racmax')),
                ('deccmin', models.FloatField(help_text='Minimum and maximum declination respectively of the CCD cover.', verbose_name='deccmin')),
                ('deccmax', models.FloatField(help_text='Minimum and maximum declination respectively of the CCD cover.', verbose_name='deccmax')),
                ('ra_cent', models.FloatField(help_text='Right ascension of the CCD center', verbose_name='ra_cent')),
                ('dec_cent', models.FloatField(help_text='Declination of the CCD center', verbose_name='dec_cent')),
                ('rac1', models.FloatField(help_text='CCD Corner Coordinates 1 - upper left.', verbose_name='rac1')),
                ('rac2', models.FloatField(help_text='CCD Corner Coordinates 2 - lower left.', verbose_name='rac2')),
                ('rac3', models.FloatField(help_text='CCD Corner Coordinates 3 - lower right.', verbose_name='rac3')),
                ('rac4', models.FloatField(help_text='CCD Corner Coordinates 4 - upper right).', verbose_name='rac4')),
                ('decc1', models.FloatField(help_text='CCD Corner Coordinates 1 - upper left.', verbose_name='decc1')),
                ('decc2', models.FloatField(help_text='CCD Corner Coordinates 2 - lower left.', verbose_name='decc2')),
                ('decc3', models.FloatField(help_text='CCD Corner Coordinates 3 - lower right.', verbose_name='decc3')),
                ('decc4', models.FloatField(help_text='CCD Corner Coordinates 4 - upper right).', verbose_name='decc4')),
                ('ra_size', models.DecimalField(decimal_places=7, help_text='CCD dimensions in degrees (width × height).', max_digits=10, verbose_name='ra_size')),
                ('dec_size', models.DecimalField(decimal_places=7, help_text='CCD dimensions in degrees (width × height).', max_digits=10, verbose_name='dec_size')),
                ('path', models.TextField(help_text='Path in the DES database where the image is stored.', verbose_name='Path')),
                ('filename', models.CharField(help_text='Name of FITS file with a CCD image.', max_length=256, verbose_name='Filename')),
                ('compression', models.CharField(help_text='Compression format (.fz) used in FITS files', max_length=5, verbose_name='Compression')),
                ('downloaded', models.BooleanField(default=False, help_text='flag indicating whether the image was downloaded from DES.', verbose_name='Downloaded')),
            ],
        ),
        migrations.CreateModel(
            name='Proccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Start Time')),
                ('finish_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Finish Time')),
                ('relative_path', models.CharField(blank=True, help_text='Path relative to the process directory, this is the internal path in the container.', max_length=256, null=True, verbose_name='Relative Path')),
                ('absolute_path', models.CharField(blank=True, help_text='Absolute path to the process directory, this is the EXTERNAL path to the container.', max_length=1024, null=True, verbose_name='Absolute Path')),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('error', 'Error')], default='pending', max_length=10, null=True, verbose_name='Status')),
                ('purged', models.BooleanField(default=False, help_text='This flag true indicates that the marked process was removed and your data excluded.', verbose_name='Purged')),
                ('input_list', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tno.CustomList', verbose_name='Input List')),
                ('owner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='SkybotOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(blank=True, default=None, help_text='(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).', max_length=6, null=True, verbose_name='Num')),
                ('name', models.CharField(help_text='(ucd=“meta.id;meta.main”) Object name (official or provisional designation).', max_length=32, verbose_name='Name')),
                ('dynclass', models.CharField(help_text='(ucd=“meta.code.class;src.class”) Object class (TNO, Centaur, Trojan, etc.).', max_length=24, verbose_name='Object classification')),
                ('ra', models.CharField(help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object.', max_length=20, verbose_name='RA')),
                ('dec', models.CharField(help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object.', max_length=20, verbose_name='Dec')),
                ('raj2000', models.FloatField(help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object in degrees.', verbose_name='RA (deg)')),
                ('decj2000', models.FloatField(help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object in degrees.', verbose_name='Dec (deg)')),
                ('mv', models.FloatField(help_text='(ucd=“phot.mag;em.opt.V”) Visual magnitude', verbose_name='Mv')),
                ('errpos', models.FloatField(help_text='(ucd=“stat.error.sys”) Uncertainty on the (RA,DEC) coordinates', verbose_name='ErrPos')),
                ('d', models.FloatField(help_text='(ucd="pos.ang") Body-to-center angular distance', verbose_name='d')),
                ('dracosdec', models.FloatField(help_text='(ucd=“pos.pm;pos.eq.ra”) Motion in right ascension d(RA)cos(DEC)', verbose_name='dRAcosDec')),
                ('ddec', models.FloatField(help_text='(ucd=“pos.pm;pos.eq.dec”) Motion in declination d(DEC)', verbose_name='dDEC')),
                ('dgeo', models.FloatField(help_text='(ucd=“phys.distance”) Distance from observer', verbose_name='Dgeo')),
                ('dhelio', models.FloatField(help_text='(ucd=“phys.distance”) Distance from the Sun', verbose_name='Dhelio')),
                ('phase', models.FloatField(help_text='(ucd=“pos.phaseAng”) Phase angle, e.g. elongation of earth from sun as seen from object', verbose_name='Phase')),
                ('solelong', models.FloatField(help_text='(ucd=“pos.angDistance”) Solar elongation, e.g. elongation of object from sun as seen from Earth', verbose_name='SolElong')),
                ('px', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.x”) Mean J2000 heliocentric position vector, x component', verbose_name='Px')),
                ('py', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.y”) Mean J2000 heliocentric position vector, y component', verbose_name='Py')),
                ('pz', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.z”) Mean J2000 heliocentric position vector, z component', verbose_name='Pz')),
                ('vx', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.x”) Mean J2000 heliocentric velocity vector, x component', verbose_name='Vx')),
                ('vy', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.y”) Mean J2000 heliocentric velocity vector, y component', verbose_name='Vy')),
                ('vz', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.z”) Mean J2000 heliocentric velocity vector, z component', verbose_name='Vz')),
                ('jdref', models.FloatField(help_text='(ucd=“time.epoch”) Reference epoch of the position/velocity vector', verbose_name='JDRef')),
                ('externallink', models.URLField(help_text='(ucd=“meta.ref.url”) External link to hint the target', verbose_name='ExternalLink')),
                ('expnum', models.BigIntegerField(blank=True, default=None, help_text='Unique identifier for each image, same function as pfw_attenp_id (it also recorded in the file name)', null=True, verbose_name='Exposure')),
                ('ccdnum', models.IntegerField(blank=True, default=None, help_text='CCD Number (1, 2, ..., 62)', null=True, verbose_name='CCD')),
                ('band', models.CharField(blank=True, choices=[('u', 'u'), ('g', 'g'), ('r', 'r'), ('i', 'i'), ('z', 'z'), ('Y', 'Y')], default=None, help_text='Filter used to do the observation (u, g, r, i, z, Y).', max_length=1, null=True, verbose_name='Filter')),
                ('pointing', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tno.Pointing', verbose_name='Pointing')),
            ],
        ),
        migrations.CreateModel(
            name='SkybotRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exposure', models.BigIntegerField(blank=True, null=True, verbose_name='Exposure')),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failure', 'Failure'), ('not_executed', 'Not Executed')], default='pending', max_length=15, null=True, verbose_name='Status')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='Start')),
                ('finish', models.DateTimeField(blank=True, null=True, verbose_name='Finish')),
                ('type_run', models.CharField(choices=[('all', 'All'), ('period', 'Period'), ('circle', 'Circle'), ('square', 'Square')], default='all', max_length=30, verbose_name='Type Run')),
                ('ra_cent', models.FloatField(blank=True, null=True, verbose_name='Ra Cent')),
                ('dec_cent', models.FloatField(blank=True, null=True, verbose_name='Dec Cent')),
                ('radius', models.FloatField(blank=True, null=True, verbose_name='Radius')),
                ('date_initial', models.DateTimeField(blank=True, null=True, verbose_name='Date Initial')),
                ('date_final', models.DateTimeField(blank=True, null=True, verbose_name='Date Final')),
                ('ra_ul', models.CharField(blank=True, max_length=30, null=True, verbose_name='RA UL')),
                ('dec_ul', models.FloatField(blank=True, null=True, verbose_name='DEC UL')),
                ('ra_ur', models.CharField(blank=True, max_length=30, null=True, verbose_name='RA UR')),
                ('dec_ur', models.FloatField(blank=True, null=True, verbose_name='DEC UR')),
                ('ra_lr', models.CharField(blank=True, max_length=30, null=True, verbose_name='RA LR')),
                ('dec_lr', models.FloatField(blank=True, null=True, verbose_name='DEC LR')),
                ('ra_ll', models.CharField(blank=True, max_length=30, null=True, verbose_name='RA LL')),
                ('dec_ll', models.FloatField(blank=True, null=True, verbose_name='DEC LL')),
                ('owner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skybot_owner', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['expnum'], name='tno_pointin_expnum_807fae_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['expnum', 'ccdnum'], name='tno_pointin_expnum_f5e2aa_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['expnum', 'ccdnum', 'band'], name='tno_pointin_expnum_56b427_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['date_obs'], name='tno_pointin_date_ob_0c709f_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['rac1'], name='tno_pointin_rac1_0866c2_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['rac2'], name='tno_pointin_rac2_d56a32_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['rac3'], name='tno_pointin_rac3_ab0355_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['rac4'], name='tno_pointin_rac4_41f39a_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['decc1'], name='tno_pointin_decc1_7e9786_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['decc2'], name='tno_pointin_decc2_f695e9_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['decc3'], name='tno_pointin_decc3_e56097_idx'),
        ),
        migrations.AddIndex(
            model_name='pointing',
            index=models.Index(fields=['decc4'], name='tno_pointin_decc4_91f279_idx'),
        ),
        migrations.AddField(
            model_name='customlist',
            name='owner',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='ccdimage',
            name='pointing',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tno.Pointing', verbose_name='Pointing'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['num'], name='tno_skyboto_num_d21a79_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['name'], name='tno_skyboto_name_aa6522_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['dynclass'], name='tno_skyboto_dynclas_f534b5_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['raj2000'], name='tno_skyboto_raj2000_496076_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['decj2000'], name='tno_skyboto_decj200_2adde4_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum'], name='tno_skyboto_expnum_08cde1_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum', 'ccdnum'], name='tno_skyboto_expnum_fd6537_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum', 'ccdnum', 'band'], name='tno_skyboto_expnum_a7ca7e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skybotoutput',
            unique_together={('num', 'name', 'expnum')},
        ),
    ]
