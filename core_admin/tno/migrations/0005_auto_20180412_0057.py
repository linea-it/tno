# Generated by Django 2.0.3 on 2018-04-12 00:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tno', '0004_auto_20180411_2046'),
    ]

    operations = [
        migrations.CreateModel(
            name='SkybotOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(blank=True, default=None, help_text='(ucd=“meta.id;meta.number”) Object number (not all objects have numbers assigned).', max_length=6, null=True, verbose_name='Num')),
                ('name', models.CharField(help_text='(ucd=“meta.id;meta.main”) Object name (official or provisional designation).', max_length=32, verbose_name='Name')),
                ('dynclass', models.CharField(help_text='(ucd=“meta.code.class;src.class”) Object class (TNO, Centaur, Trojan, etc.).', max_length=24, verbose_name='Object classification')),
                ('ra', models.FloatField(help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object.', verbose_name='RA')),
                ('dec', models.FloatField(help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object.', verbose_name='Dec')),
                ('raj2000', models.FloatField(help_text='(ucd=“pos.eq.ra;meta.main”) Right ascension of the identified object in degrees.', verbose_name='RA (deg)')),
                ('decj2000', models.FloatField(help_text='(ucd=“pos.eq.dec;meta.main”) Declination of the identified object in degrees.', verbose_name='Dec (deg)')),
                ('mv', models.FloatField(help_text='(ucd=“phot.mag;em.opt.V”) Visual magnitude', verbose_name='Mv')),
                ('errpos', models.FloatField(help_text='(ucd=“stat.error.sys”) Uncertainty on the (RA,DEC) coordinates', verbose_name='ErrPos')),
                ('d', models.FloatField(help_text='(ucd="pos.ang") Body-to-center angular distance', verbose_name='d')),
                ('dracosdec', models.FloatField(help_text='(ucd=“pos.pm;pos.eq.ra”) Motion in right ascension d(RA)cos(DEC)', verbose_name='dRAcosDec')),
                ('ddec', models.FloatField(help_text='(ucd=“pos.pm;pos.eq.dec”) Motion in declination d(DEC)', verbose_name='dDEC')),
                ('dgeo', models.FloatField(help_text='(ucd=“phys.distance”) Distance from observer', verbose_name='Dgeo')),
                ('dhelio', models.FloatField(help_text='(ucd=“phys.distance”) Distance from the Sun', verbose_name='Dhelio')),
                ('phase', models.FloatField(help_text='(ucd=“pos.phaseAng”) Phase angle, e.g. elongation of earth from sun as seen from object', verbose_name='Phase')),
                ('solelong', models.FloatField(help_text='(ucd=“pos.angDistance”) Solar elongation, e.g. elongation of object from sun as seen from Earth', verbose_name='SolElong')),
                ('px', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.x”) Mean J2000 heliocentric position vector, x component', verbose_name='Px')),
                ('py', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.y”) Mean J2000 heliocentric position vector, y component', verbose_name='Py')),
                ('pz', models.FloatField(help_text='(ucd=“src.orbital.pos;meta.id.z”) Mean J2000 heliocentric position vector, z component', verbose_name='Pz')),
                ('vx', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.x”) Mean J2000 heliocentric velocity vector, x component', verbose_name='Vx')),
                ('vy', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.y”) Mean J2000 heliocentric velocity vector, y component', verbose_name='Vy')),
                ('vz', models.FloatField(help_text='(ucd=“src.veloc.orbital;meta.id.z”) Mean J2000 heliocentric velocity vector, z component', verbose_name='Vz')),
                ('jdref', models.FloatField(help_text='(ucd=“time.epoch”) Reference epoch of the position/velocity vector', verbose_name='JDRef')),
                ('externallink', models.URLField(help_text='(ucd=“meta.ref.url”) External link to hint the target', verbose_name='ExternalLink')),
                ('expnum', models.BigIntegerField(help_text='Unique identifier for each image, same function as pfw_attenp_id (it also recorded in the file name)', verbose_name='Exposure')),
                ('ccdnum', models.IntegerField(help_text='CCD Number (1, 2, ..., 62)', verbose_name='CCD')),
                ('band', models.CharField(choices=[('u', 'u'), ('g', 'g'), ('r', 'r'), ('i', 'i'), ('z', 'z'), ('Y', 'Y')], help_text='Filter used to do the observation (u, g, r, i, z, Y).', max_length=1, verbose_name='Filter')),
                ('pointing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tno.Pointings', verbose_name='Pointing')),
            ],
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['num'], name='tno_skyboto_num_d21a79_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['name'], name='tno_skyboto_name_aa6522_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['dynclass'], name='tno_skyboto_dynclas_f534b5_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['raj2000'], name='tno_skyboto_raj2000_496076_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['decj2000'], name='tno_skyboto_decj200_2adde4_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum'], name='tno_skyboto_expnum_08cde1_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum', 'ccdnum'], name='tno_skyboto_expnum_fd6537_idx'),
        ),
        migrations.AddIndex(
            model_name='skybotoutput',
            index=models.Index(fields=['expnum', 'ccdnum', 'band'], name='tno_skyboto_expnum_a7ca7e_idx'),
        ),
    ]
