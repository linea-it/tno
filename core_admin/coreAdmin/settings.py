"""
Django settings for coreAdmin project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import urllib.parse

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Diretorio com scripts externos.
BIN_DIR = os.path.join(BASE_DIR, 'bin')

# PROJECT PATHS
# estes diretorios estao montados no container utilizando variaveis de ambiente, mas para o container sempre vao ser
# os mesmos listados aqui.
LOG_DIR = "/log"
ARCHIVE_DIR = "/archive"
PROCCESS_DIR = "/proccess"
CCD_IMAGES_DIR = "/ccd_images"

# Sub diretorios que ficam dentro de /archive

SKYBOT_ROOT = 'skybot_output'
SKYBOT_OUTPUT = os.path.join(ARCHIVE_DIR, SKYBOT_ROOT)
if not os.path.exists(SKYBOT_OUTPUT):
    os.mkdir(SKYBOT_OUTPUT)

OBSERVATIONS_DIR = os.path.join(ARCHIVE_DIR, "observations")
if not os.path.exists(OBSERVATIONS_DIR):
    os.mkdir(OBSERVATIONS_DIR)

ORBITAL_PARAMETERS_DIR = os.path.join(ARCHIVE_DIR, "orbital_parameters")
if not os.path.exists(ORBITAL_PARAMETERS_DIR):
    os.mkdir(ORBITAL_PARAMETERS_DIR)

BSP_JPL_DIR = os.path.join(ARCHIVE_DIR, "bsp_jpl")
if not os.path.exists(BSP_JPL_DIR):
    os.mkdir(BSP_JPL_DIR)


LEAP_ROOT = 'leap_seconds'
LEAP_SECONDS = os.path.join(ARCHIVE_DIR, LEAP_ROOT)
if not os.path.exists(LEAP_SECONDS):
    os.mkdir(LEAP_SECONDS)

BSP_PLA_ROOT = 'bsp_planetary'
BSP_PLANETARY = os.path.join(ARCHIVE_DIR, BSP_PLA_ROOT)
if not os.path.exists(BSP_PLANETARY):
    os.mkdir(BSP_PLANETARY)

JHONSTONS_ARCHIVE_ROOT = 'jhonstons_archive'
JHONSTONS_ARCHIVE = os.path.join(ARCHIVE_DIR, JHONSTONS_ARCHIVE_ROOT)
if not os.path.exists(JHONSTONS_ARCHIVE):
    os.mkdir(JHONSTONS_ARCHIVE)

# TODO:  Este diretorio e provisorio faz parte da simulacao do PRAIA.
ASTROMETRY_POSITIONS_DIR = os.path.join(ARCHIVE_DIR, "astrometry_positions")
if not os.path.exists(ASTROMETRY_POSITIONS_DIR):
    os.mkdir(ASTROMETRY_POSITIONS_DIR)
    os.chmod(ASTROMETRY_POSITIONS_DIR, 0o775)

MEDIA_ROOT = ARCHIVE_DIR
MEDIA_URL = '/media/'

MEDIA_TMP_DIR = os.path.join(MEDIA_ROOT, "tmp")
if not os.path.exists(MEDIA_TMP_DIR):
    os.mkdir(MEDIA_TMP_DIR)

MEDIA_TMP_URL = urllib.parse.urljoin(MEDIA_URL, 'tmp/')

# Emails
# Notifications Email
EMAIL_NOTIFICATIONS = os.environ.get('EMAIL_NOTIFICATIONS', None)
if not EMAIL_NOTIFICATIONS:
    raise ("Environment variable EMAIL_NOTIFICATIONS can not be null.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm=5=08^4a(il)bba)$cd%f*#wrcammi(r(q#($b$n^-jz8%+j0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'url_filter',
    'corsheaders',

    # Project Apps
    'common',
    'tno',
    'skybot',    
    'praia',
    'orbit',
    'predict',
    'des',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'current_user.CurrentUserMiddleware',
]

ROOT_URLCONF = 'coreAdmin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
            ],
        },
    },
]

WSGI_APPLICATION = 'coreAdmin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASS'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    },
}
# caso o banco de dados tenha definido um schema
if 'DB_SCHEMA' in os.environ:
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=%s,public' % os.environ['DB_SCHEMA']
    }

CATALOG_DATABASE = {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': os.environ['CATALOG_DB_NAME'],
    'USER': os.environ['CATALOG_DB_USER'],
    'PASSWORD': os.environ['CATALOG_DB_PASS'],
    'HOST': os.environ['CATALOG_DB_HOST'],
    'PORT': os.environ['CATALOG_DB_PORT'],
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.StandardResultsSetPagination',
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'url_filter.integrations.drf.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
}

# CORS com essa combinação o serv de desenvolvimento do frontend consegue se authenticar
if DEBUG:
    ALLOWED_HOSTS = '*'
    CORS_ALLOW_CREDENTIALS = True
    SESSION_COOKIE_SAMESITE = None

# Parsl
PARSL_CONFIG = {
    "sites": [
        {
            "site": "Threads",
            "auth": {"channel": None},
            "execution": {
                "executor": "threads",
                "provider": None,
                "maxThreads": int(os.environ.get('AVAILABLE_THREADS', 8))
            }
        }
    ],
    "globals": {
        "lazyErrors": True,
    }
}

# MINIMUM THREADS
MINIMUM_THREADS = os.environ.get('MINIMUM_THREADS', 4)

# DOCKER Configuration
try:
    DOCKER_HOST = os.environ["DOCKER_HOST"]
except Exception as e:
    raise ("Environment variable DOCKER_HOST can not be null.")

try:
    HOST_ARCHIVE_DIR = os.environ["HOST_ARCHIVE"]
except Exception as e:
    raise ("Environment variable HOST_ARCHIVE can not be null.")


# CONDOR API
try:
    CONDOR_API = os.environ["CONDOR_API"]
    CONDOR_CLUSTER = os.environ["CONDOR_CLUSTER"]
    CONDOR_MACHINE = os.environ["CONDOR_MACHINE"]
except Exception as e:
    raise ("Condor API access settings are required in .env file")

try:
    LOGGING_LEVEL = os.environ["LOGGING_LEVEL"]
except:
    LOGGING_LEVEL = 'INFO'

# HOST URL url para onde o app está disponivel. em desenvolvimento //localhost
# No ambiente de testes é //tno-testing.linea.gov.br
HOST_URL = None
try:
    HOST_URL = os.environ["HOST_URL"]
except:
    raise ("Environment variable HOST_URL can not be null.")

# Configurando os redirects padrao de login e logout, para apontar para o HOST_URL.
if HOST_URL is not None:
    LOGOUT_REDIRECT_URL = HOST_URL
    LOGIN_REDIRECT_URL = HOST_URL


# Auth Shibboleth
# Variaveis de configuração para o Login Institucional usando Shibboleth e Gidlab.
# se AUTH_SHIB_URL usar None para desativar o login institucional, isto remove o botão da tela de login.
AUTH_SHIB_URL = None
try:
    AUTH_SHIB_URL = os.getenv('AUTH_SHIB_URL')
    if AUTH_SHIB_URL is not None:
        AUTH_SHIB_SESSIONS = "/auth_shib_sessions"
        AUTH_SHIB_CRYPT_KEY = os.getenv('AUTH_SHIB_CRYPT_KEY')

except Exception as e:
    raise ("Auth Shibboleth settings are required in .env file")

# Url para download dos CCDs,
# usar None para desativar esta opcao.
# ex: 'https://desar2.cosmology.illinois.edu/DESFiles/desarchive/'
DES_ARCHIVE_URL = os.getenv('DES_ARCHIVE_URL')
if DES_ARCHIVE_URL is not None:
    try:
        # Username e Password no DES.
        DES_USERNAME = os.getenv('DES_USERNAME')
        DES_PASSWORD = os.getenv('DES_PASSWORD')
    except Exception as e:
        raise ("DES user settings are required in .env file")


# Skybot Server URL 
SKYBOT_SERVER = None
try:
    SKYBOT_SERVER = os.environ["SKYBOT_SERVER"]

except Exception as e:
    raise ("SKYBOT_SERVER settings are required in .env file")


SETTINGS_EXPORT = [
    'AUTH_SHIB_URL',
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
        },
        'proccess': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'proccess.log'),
            'formatter': 'standard',
        },
        'astrometry': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'astrometry.log'),
            'formatter': 'standard',
        },
        'astrometry_daemon': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'astrometry_daemon.log'),
            'formatter': 'standard',
        },
        'refine_orbit': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'refine_orbit.log'),
            'formatter': 'standard',
        },
        'predict_occultation': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'predict_occultation.log'),
            'formatter': 'standard',
        },
        # Skybot Download
        'skybot': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'skybot.log'),
            'formatter': 'standard',
        },
        # Skybot Load data
        'skybot_load_data': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'skybot_load_data.log'),
            'formatter': 'standard',
        },
        'condor': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'condor.log'),
            'formatter': 'standard',
        },
        'auth_shibboleth': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'auth_shibboleth.log'),
            'formatter': 'standard',
        },
        'download_ccds': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'filename': os.path.join(LOG_DIR, 'download_ccds.log'),
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'proccess': {
            'handlers': ['proccess'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'astrometry': {
            'handlers': ['astrometry'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'astrometry_daemon': {
            'handlers': ['astrometry_daemon'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'refine_orbit': {
            'handlers': ['refine_orbit'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'predict_occultation': {
            'handlers': ['predict_occultation'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'skybot': {
            'handlers': ['skybot'],
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'skybot_load_data': {
            'handlers': ['skybot_load_data'],
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'condor': {
            'handlers': ['condor'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'auth_shibboleth': {
            'handlers': ['auth_shibboleth'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        'download_ccds': {
            'handlers': ['download_ccds'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },

    },
}
